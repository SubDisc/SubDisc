package nl.liacs.subdisc.gui;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.text.NumberFormat;
import java.util.BitSet;
import java.util.Random;
import java.util.TreeSet;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;

import nl.liacs.subdisc.Attribute;
import nl.liacs.subdisc.Bayesian;
import nl.liacs.subdisc.BinaryTable;
import nl.liacs.subdisc.CandidateQueue;
import nl.liacs.subdisc.Column;
import nl.liacs.subdisc.Condition;
import nl.liacs.subdisc.ConditionList;
import nl.liacs.subdisc.CorrelationMeasure;
import nl.liacs.subdisc.DAG;
import nl.liacs.subdisc.ErrorWindow;
import nl.liacs.subdisc.Log;
import nl.liacs.subdisc.QualityMeasure;
import nl.liacs.subdisc.SearchParameters;
import nl.liacs.subdisc.Subgroup;
import nl.liacs.subdisc.SubgroupDiscovery;
import nl.liacs.subdisc.SubgroupSet;
import nl.liacs.subdisc.Table;
import nl.liacs.subdisc.TargetConcept;

public class MiningWindow extends JFrame
{
	static final long serialVersionUID = 1L;

	// TODO get image
	public static final Image ICON = Toolkit.getDefaultToolkit().getImage(MiningWindow.class.getResource("/icon.gif"));

	private Table itsTable;
	private int itsTotalCount;

	//target info
	private int itsPositiveCount;  //nominal target
	private double itsTargetAverage;  //numeric target

	public MiningWindow(Table theTable)
	{
		// initialize graphical components
		initComponents();
		setTitle("Subgroup Discovery");
//		setIconImage(ICON);
		pack ();
		setSize(700, 600);

		// Open log/debug files
		Log.openFileOutputStreams();

		itsTable = theTable;
		initGuiComponents();
	}

	private	void initGuiComponents()
	{
		//set dataset properties
		jLFieldTargetTable.setText("tablename");
		itsTotalCount = itsTable.getNrRows();
		jLFieldNrExamples.setText("" + itsTotalCount);
		jLFieldNrColumns.setText("" + itsTable.getNrColumns());
		setSearchCoverageMaximum("1.0");

		initTargetType();
		initSearchDepthMaximum();
		setSubgroupsMaximum("50");
		setSearchTimeMaximum("1.0");
		initSearchStrategyItems();
		initSearchStrategyWidth();
		initNumericStrategy();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the FormEditor.
	 */
	private void initComponents()
	{
		jMiningWindowMenuBar = new javax.swing.JMenuBar();
		jMenuFile = new javax.swing.JMenu();
		jMenuItemOpenDataModel = new javax.swing.JMenuItem();
		jMenuItemShowDataModel = new javax.swing.JMenuItem();
		jMenuItemDataExplorer = new javax.swing.JMenuItem();
		jMenuItemBrowseTarget = new javax.swing.JMenuItem();
		jSeparator2 = new javax.swing.JSeparator();
		jMenuItemSubgroupDiscovery = new javax.swing.JMenuItem();
		jSeparator3 = new javax.swing.JSeparator();
		jMenuItemExit = new javax.swing.JMenuItem();
		jMenuAbout = new javax.swing.JMenu();
		jMenuItemAboutSafarii = new javax.swing.JMenuItem();
		jPanelSouth = new javax.swing.JPanel();
		jLabelLayoutFiller0 = new javax.swing.JLabel();
		jPanelLayoutFiller1 = new javax.swing.JPanel();
		jPanelMineButtons = new javax.swing.JPanel();
		jButtonDataModel = new javax.swing.JButton();
		jButtonDataExplorer = new javax.swing.JButton();
		jButtonBrowse = new javax.swing.JButton();
		jButtonSubgroupDiscovery = new javax.swing.JButton();
		jButtonRandomSubgroups = new javax.swing.JButton();
		jButtonRandomConditions = new javax.swing.JButton();
		jPanelLayoutFiller2 = new javax.swing.JPanel();
		jLabelLayoutFiller3 = new javax.swing.JLabel();
		jPanelCenter = new javax.swing.JPanel();
		jPanelRuleTarget = new javax.swing.JPanel();
		jPanelRuleTargetLabels = new javax.swing.JPanel();
		jLabelTargetTable = new javax.swing.JLabel();
		jLabelTargetAttribute = new javax.swing.JLabel();
		jLabelMiscField = new javax.swing.JLabel();		//used for target value or secondary target
		jLabelSecondaryTargets = new javax.swing.JLabel();
		jLabelNrExamples = new javax.swing.JLabel();
		jLabelNrColumns = new javax.swing.JLabel();
		jLabelTargetInfo = new javax.swing.JLabel();
		jPanelRuleTargetFields = new javax.swing.JPanel();
		jLFieldTargetTable = new javax.swing.JLabel();
		jComboBoxTargetAttribute = new javax.swing.JComboBox();
		jComboBoxMiscField = new javax.swing.JComboBox(); 	///used for target value or secondary target
		jListSecondaryTargets = new javax.swing.JList(new DefaultListModel());
		SecondaryTargets = new JScrollPane(jListSecondaryTargets);
		jLFieldNrExamples = new javax.swing.JLabel();
		jLFieldNrColumns = new javax.swing.JLabel();
		jLFieldTargetInfo = new javax.swing.JLabel();
		jButtonBaseModel = new javax.swing.JButton();
		jPanelRuleEvaluation = new javax.swing.JPanel();
		jPanelEvaluationLabels = new javax.swing.JPanel();
		jLabelTargetType = new javax.swing.JLabel();
		jLabelQualityMeasure = new javax.swing.JLabel();
		jLabelEvaluationTreshold = new javax.swing.JLabel();
		jPanelEvaluationFields = new javax.swing.JPanel();
		jComboBoxTargetType = new javax.swing.JComboBox();
		jComboBoxQualityMeasure = new javax.swing.JComboBox();
		jTextFieldQualityMeasureMinimum = new javax.swing.JTextField();
		jPanelSearchParameters = new javax.swing.JPanel();
		jPanelSearchParameterLabels = new javax.swing.JPanel();
		jLabelSearchDepth = new javax.swing.JLabel();
		jLabelSearchCoverageMinimum = new javax.swing.JLabel();
		jLabelSearchCoverageMaximum = new javax.swing.JLabel();
		jLabelSubgroupsMaximum = new javax.swing.JLabel();
		jLabelSearchTimeMaximum = new javax.swing.JLabel();
		jPanelSearchParameterFields = new javax.swing.JPanel();
		jTextFieldSearchDepth = new javax.swing.JTextField();
		jTextFieldSearchCoverageMinimum = new javax.swing.JTextField();
		jTextFieldSearchCoverageMaximum = new javax.swing.JTextField();
		jTextFieldSubgroupsMaximum = new javax.swing.JTextField();
		jTextFieldSearchTimeMaximum = new javax.swing.JTextField();
		jPanelSearchStrategy = new javax.swing.JPanel();
		jPanelSearchStrategyLabels = new javax.swing.JPanel();
		jLabelStrategyType = new javax.swing.JLabel();
		jLabelStrategyWidth = new javax.swing.JLabel();
		jLabelSearchStrategyNumericFrr = new javax.swing.JLabel();
		jPanelSearchStrategyFields = new javax.swing.JPanel();
		jComboBoxSearchStrategyType = new javax.swing.JComboBox();
		jTextFieldSearchStrategyWidth = new javax.swing.JTextField();
		jComboBoxNumeric = new javax.swing.JComboBox();
		jPanelWest = new javax.swing.JPanel();
		jPanelEast = new javax.swing.JPanel();
		jPanelNorth = new javax.swing.JPanel();
		jMiningWindowMenuBar.setFont(new java.awt.Font ("Dialog", 0, 10));

		jMenuFile.setFont(new java.awt.Font ("Dialog", 0, 10));
		jMenuFile.setText("File");
		jMenuFile.setMnemonic('F');

		jMenuItemOpenDataModel.setFont(new java.awt.Font ("Dialog", 0, 10));
		jMenuItemOpenDataModel.setText("Open Datamodel");
		jMenuItemOpenDataModel.setMnemonic('O');
		jMenuItemOpenDataModel.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_MASK));
		jMenuItemOpenDataModel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItemOpenDataModelActionPerformed(evt);
			}
		}
		);
		jMenuFile.add(jMenuItemOpenDataModel);


		jMenuItemDataExplorer.setFont(new java.awt.Font ("Dialog", 0, 10));
		jMenuItemDataExplorer.setText("Data Explorer");
		jMenuItemDataExplorer.setMnemonic('E');
		jMenuItemDataExplorer.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, InputEvent.CTRL_MASK));
		jMenuItemDataExplorer.addActionListener(new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt) { DataExplorerActionPerformed(evt);	}
			}
		);
		jMenuFile.add(jMenuItemDataExplorer);

		jMenuItemBrowseTarget.setFont(new java.awt.Font ("Dialog", 0, 10));
		jMenuItemBrowseTarget.setText("Browse");
		jMenuItemBrowseTarget.setMnemonic('B');
		jMenuItemBrowseTarget.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B, InputEvent.CTRL_MASK));
		jMenuItemBrowseTarget.addActionListener(new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt) { BrowseActionPerformed(evt); }
			}
		);
		jMenuFile.add(jMenuItemBrowseTarget);

		jMenuFile.add(jSeparator2);

		jMenuItemSubgroupDiscovery.setFont(new java.awt.Font ("Dialog", 0, 10));
		jMenuItemSubgroupDiscovery.setText("Subgroup Discovery");
		jMenuItemSubgroupDiscovery.setMnemonic('S');
		jMenuItemSubgroupDiscovery.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_MASK));
		jMenuItemSubgroupDiscovery.addActionListener(new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt) { jButtonSubgroupDiscoveryActionPerformed(evt); }
			}
		);
		jMenuFile.add(jMenuItemSubgroupDiscovery);

		jMenuFile.add(jSeparator3);

		jMenuItemExit.setFont(new java.awt.Font ("Dialog", 0, 10));
		jMenuItemExit.setText("Exit");
		jMenuItemExit.setMnemonic('X');
		jMenuItemExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.CTRL_MASK));
		jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItemExitActionPerformed(evt);
			}
		}
		);
		jMenuFile.add(jMenuItemExit);
		jMiningWindowMenuBar.add(jMenuFile);

		jMenuAbout.setFont(new java.awt.Font ("Dialog", 0, 10));
		jMenuAbout.setText("About");
		jMenuAbout.setMnemonic('A');

		jMenuItemAboutSafarii.setFont(new java.awt.Font ("Dialog", 0, 10));
		jMenuItemAboutSafarii.setText("Safarii");
		jMenuItemAboutSafarii.setMnemonic('I');
		jMenuItemAboutSafarii.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I, InputEvent.CTRL_MASK));
		jMenuItemAboutSafarii.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItemAboutSafariiActionPerformed(evt);
			}
		}
		);
		jMenuAbout.add(jMenuItemAboutSafarii);
		jMiningWindowMenuBar.add(jMenuAbout);
		setFont(new java.awt.Font ("Dialog", 0, 10));
		addWindowListener(new java.awt.event.WindowAdapter()
			{
				public void windowClosing(java.awt.event.WindowEvent evt) { exitForm(evt); }
			}
		);

		jPanelSouth.setFont(new java.awt.Font ("Dialog", 0, 10));

		jLabelLayoutFiller0.setPreferredSize(new java.awt.Dimension(0, 40));
		jLabelLayoutFiller0.setMinimumSize(new java.awt.Dimension(0, 40));
		jPanelSouth.add(jLabelLayoutFiller0);


		jPanelSouth.add(jPanelLayoutFiller1);


		jPanelMineButtons.setMinimumSize(new java.awt.Dimension(0, 40));


		jButtonDataExplorer.setPreferredSize(new java.awt.Dimension(100, 25));
		jButtonDataExplorer.setBorder(new javax.swing.border.BevelBorder(0));
		jButtonDataExplorer.setMaximumSize(new java.awt.Dimension(95, 25));
		jButtonDataExplorer.setFont(new java.awt.Font ("Dialog", 1, 11));
		jButtonDataExplorer.setText("Data Explorer");
		jButtonDataExplorer.setMinimumSize(new java.awt.Dimension(82, 25));
		jButtonDataExplorer.setMnemonic('E');
		jButtonDataExplorer.addActionListener(
			new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					DataExplorerActionPerformed(evt);
				}
			}
		);
		jPanelMineButtons.add(jButtonDataExplorer);


		jButtonBrowse.setPreferredSize(new java.awt.Dimension(80, 25));
		jButtonBrowse.setBorder(new javax.swing.border.BevelBorder(0));
		jButtonBrowse.setMaximumSize(new java.awt.Dimension(95, 25));
		jButtonBrowse.setFont(new java.awt.Font ("Dialog", 1, 11));
		jButtonBrowse.setText("Browse");
		jButtonBrowse.setMinimumSize(new java.awt.Dimension(82, 25));
		jButtonBrowse.setMnemonic('B');
		jButtonBrowse.addActionListener(
			new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					BrowseActionPerformed(evt);
				}
			}
		);
		jPanelMineButtons.add(jButtonBrowse);

		jButtonSubgroupDiscovery.setPreferredSize(new java.awt.Dimension(120, 25));
		jButtonSubgroupDiscovery.setBorder(new javax.swing.border.BevelBorder(0));
		jButtonSubgroupDiscovery.setMaximumSize(new java.awt.Dimension(130, 25));
		jButtonSubgroupDiscovery.setFont(new java.awt.Font ("Dialog", 1, 11));
		jButtonSubgroupDiscovery.setText("Subgroup Discovery");
		jButtonSubgroupDiscovery.setMinimumSize(new java.awt.Dimension(82, 25));
		jButtonSubgroupDiscovery.setMnemonic('S');
		jButtonSubgroupDiscovery.addActionListener(
			new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					jButtonSubgroupDiscoveryActionPerformed(evt);
				}
			}
		);
		jPanelMineButtons.add(jButtonSubgroupDiscovery);

		jButtonRandomSubgroups.setPreferredSize(new java.awt.Dimension(120, 25));
		jButtonRandomSubgroups.setBorder(new javax.swing.border.BevelBorder(0));
		jButtonRandomSubgroups.setMaximumSize(new java.awt.Dimension(130, 25));
		jButtonRandomSubgroups.setFont(new java.awt.Font ("Dialog", 1, 11));
		jButtonRandomSubgroups.setText("Random Subgroups");
		jButtonRandomSubgroups.setMinimumSize(new java.awt.Dimension(82, 25));
		jButtonRandomSubgroups.setMnemonic('R');
		jButtonRandomSubgroups.addActionListener(
			new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					jButtonRandomSubgroupsActionPerformed(evt);
				}
			}
		);
		jPanelMineButtons.add(jButtonRandomSubgroups);

		jButtonRandomConditions.setPreferredSize(new java.awt.Dimension(120, 25));
		jButtonRandomConditions.setBorder(new javax.swing.border.BevelBorder(0));
		jButtonRandomConditions.setMaximumSize(new java.awt.Dimension(130, 25));
		jButtonRandomConditions.setFont(new java.awt.Font ("Dialog", 1, 11));
		jButtonRandomConditions.setText("Random Conditions");
		jButtonRandomConditions.setMinimumSize(new java.awt.Dimension(82, 25));
		jButtonRandomConditions.setMnemonic('C');
		jButtonRandomConditions.addActionListener(
			new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					jButtonRandomConditionsActionPerformed(evt);
				}
			}
		);
		jPanelMineButtons.add(jButtonRandomConditions);

		jPanelSouth.add(jPanelMineButtons);
		jPanelSouth.add(jPanelLayoutFiller2);
		jPanelSouth.add(jLabelLayoutFiller3);
		getContentPane().add(jPanelSouth, java.awt.BorderLayout.SOUTH);


	//dataset =================================
		jPanelCenter.setLayout(new java.awt.GridLayout(2, 2));

		jPanelRuleTarget.setLayout(new javax.swing.BoxLayout(jPanelRuleTarget, 0));
		jPanelRuleTarget.setBorder(new javax.swing.border.TitledBorder(
			new javax.swing.border.EtchedBorder(), "dataset", 4, 2, new java.awt.Font ("Dialog", 1, 11)));
		jPanelRuleTarget.setFont(new java.awt.Font ("Dialog", 1, 12));

		jPanelRuleTargetLabels.setLayout(new java.awt.GridLayout(7, 1));

		jLabelTargetTable.setText(" target table");
		jLabelTargetTable.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelRuleTargetLabels.add(jLabelTargetTable);

		jLabelTargetAttribute.setText(" target attribute");
		jLabelTargetAttribute.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelRuleTargetLabels.add(jLabelTargetAttribute);

		jLabelNrExamples.setText(" # examples");
		jLabelNrExamples.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelRuleTargetLabels.add(jLabelNrExamples);

		jLabelNrColumns.setText(" # columns");
		jLabelNrColumns.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelRuleTargetLabels.add(jLabelNrColumns);

		jPanelRuleTarget.add(jPanelRuleTargetLabels);

		jPanelRuleTargetFields.setLayout(new java.awt.GridLayout(7, 1));

		jLFieldTargetTable.setForeground(java.awt.Color.black);
		jLFieldTargetTable.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelRuleTargetFields.add(jLFieldTargetTable);

		jLFieldNrExamples.setForeground(java.awt.Color.black);
		jLFieldNrExamples.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelRuleTargetFields.add(jLFieldNrExamples);

		jLFieldNrColumns.setForeground(java.awt.Color.black);
		jLFieldNrColumns.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelRuleTargetFields.add(jLFieldNrColumns);

		jPanelRuleTarget.add(jPanelRuleTargetFields);
		jPanelCenter.add(jPanelRuleTarget);


	// target concept ======================================================================
		jPanelRuleEvaluation.setLayout(new javax.swing.BoxLayout(jPanelRuleEvaluation, 0));
		jPanelRuleEvaluation.setBorder(new javax.swing.border.TitledBorder(
			new javax.swing.border.EtchedBorder(), "target concept", 4, 2,
			new java.awt.Font ("Dialog", 1, 11)));
		jPanelRuleEvaluation.setFont(new java.awt.Font ("Dialog", 1, 12));

		jPanelEvaluationLabels.setLayout(new java.awt.GridLayout(8, 1));

		jComboBoxTargetType.setPreferredSize(new java.awt.Dimension(86, 22));
		jComboBoxTargetType.setMinimumSize(new java.awt.Dimension(86, 22));
		jComboBoxTargetType.setFont(new java.awt.Font ("Dialog", 0, 10));
		jComboBoxTargetType.addActionListener(new java.awt.event.ActionListener()
			{
			public void actionPerformed(java.awt.event.ActionEvent evt) { jComboBoxTargetTypeActionPerformed(evt);}
			}
		);
		jPanelEvaluationFields.add(jComboBoxTargetType);

		jLabelTargetType.setText(" target type");
		jLabelTargetType.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelTargetType);

		jLabelQualityMeasure.setText(" quality measure");
		jLabelQualityMeasure.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelQualityMeasure);

		jLabelEvaluationTreshold.setText(" measure minimum");
		jLabelEvaluationTreshold.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelEvaluationTreshold);

		jLabelTargetAttribute.setText(" primary target");
		jLabelTargetAttribute.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelTargetAttribute);

		jLabelMiscField.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelMiscField);

		jLabelSecondaryTargets.setText(" secondary targets");
		jLabelSecondaryTargets.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelSecondaryTargets);

		jLabelTargetInfo.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelTargetInfo);
		jPanelRuleEvaluation.add(jPanelEvaluationLabels);


		//fields ================================
		jPanelEvaluationFields.setLayout(new java.awt.GridLayout(8, 1));

		jComboBoxQualityMeasure.setPreferredSize(new java.awt.Dimension(86, 22));
		jComboBoxQualityMeasure.setMinimumSize(new java.awt.Dimension(86, 22));
		jComboBoxQualityMeasure.setFont(new java.awt.Font ("Dialog", 0, 10));
		jComboBoxQualityMeasure.addActionListener(new java.awt.event.ActionListener()
			{
			public void actionPerformed(java.awt.event.ActionEvent evt) { jComboBoxQualityMeasureActionPerformed(evt);}
			}
		);
		jPanelEvaluationFields.add(jComboBoxQualityMeasure);

		jTextFieldQualityMeasureMinimum.setPreferredSize(new java.awt.Dimension(86, 22));
		jTextFieldQualityMeasureMinimum.setFont(new java.awt.Font ("Dialog", 0, 10));
		jTextFieldQualityMeasureMinimum.setText("0");
		jTextFieldQualityMeasureMinimum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jTextFieldQualityMeasureMinimum.setMinimumSize(new java.awt.Dimension(86, 22));
		jPanelEvaluationFields.add(jTextFieldQualityMeasureMinimum);

		jComboBoxTargetAttribute.setPreferredSize(new java.awt.Dimension(86, 22));
		jComboBoxTargetAttribute.setMinimumSize(new java.awt.Dimension(86, 22));
		jComboBoxTargetAttribute.setFont(new java.awt.Font ("Dialog", 0, 10));
		jComboBoxTargetAttribute.addActionListener(new java.awt.event.ActionListener() {
			  public void actionPerformed(java.awt.event.ActionEvent evt) {
				  jComboBoxTargetAttributeActionPerformed(evt);
			  }
			}
		);
		jPanelEvaluationFields.add(jComboBoxTargetAttribute);

		jComboBoxMiscField.setFont(new java.awt.Font ("Dialog", 0, 10));
		jComboBoxMiscField.addActionListener(new java.awt.event.ActionListener() {
			  public void actionPerformed(java.awt.event.ActionEvent evt) {
				  jComboBoxMiscFieldActionPerformed(evt);
			  }
			}
		);
		jPanelEvaluationFields.add(jComboBoxMiscField);

		jListSecondaryTargets.setPreferredSize(new java.awt.Dimension(86, 30));
		jListSecondaryTargets.setMinimumSize(new java.awt.Dimension(86, 22));
		jListSecondaryTargets.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelEvaluationFields.add(jListSecondaryTargets);

		jLFieldTargetInfo.setForeground(java.awt.Color.black);
		jLFieldTargetInfo.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelEvaluationFields.add(jLFieldTargetInfo);

		jButtonBaseModel.setPreferredSize(new java.awt.Dimension(86, 22));
		jButtonBaseModel.setBorder(new javax.swing.border.BevelBorder(0));
		jButtonBaseModel.setMaximumSize(new java.awt.Dimension(95, 25));
		jButtonBaseModel.setFont(new java.awt.Font ("Dialog", 1, 11));
		jButtonBaseModel.setText("Base Model");
		jButtonBaseModel.setMinimumSize(new java.awt.Dimension(82, 25));
		jButtonBaseModel.setMnemonic('M');
		jButtonBaseModel.addActionListener(
			new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					jButtonBaseModelActionPerformed(evt);
				}
			}
		);
		jPanelEvaluationFields.add(jButtonBaseModel);


		jPanelRuleEvaluation.add(jPanelEvaluationFields);
		jPanelCenter.add(jPanelRuleEvaluation);




	//search conditions ===================================================================
		jPanelSearchParameters.setLayout(new javax.swing.BoxLayout(jPanelSearchParameters, 0));
		jPanelSearchParameters.setBorder(new javax.swing.border.TitledBorder(
			new javax.swing.border.EtchedBorder(), "search conditions", 4, 2,
			new java.awt.Font ("Dialog", 1, 11)));
		jPanelSearchParameters.setFont(new java.awt.Font ("Dialog", 1, 12));

		jPanelSearchParameterLabels.setLayout(new java.awt.GridLayout(7, 1));

		jLabelSearchDepth.setText(" refinement depth");
		jLabelSearchDepth.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelSearchParameterLabels.add(jLabelSearchDepth);

		jLabelSearchCoverageMinimum.setText(" minimum coverage");
		jLabelSearchCoverageMinimum.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelSearchParameterLabels.add(jLabelSearchCoverageMinimum);

		jLabelSearchCoverageMaximum.setText(" coverage fraction");
		jLabelSearchCoverageMaximum.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelSearchParameterLabels.add(jLabelSearchCoverageMaximum);

		jLabelSubgroupsMaximum.setText(" maximum subgroups");
		jLabelSubgroupsMaximum.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelSearchParameterLabels.add(jLabelSubgroupsMaximum);

		jLabelSearchTimeMaximum.setText(" maximum time (min)");
		jLabelSearchTimeMaximum.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelSearchParameterLabels.add(jLabelSearchTimeMaximum);

		jPanelSearchParameters.add(jPanelSearchParameterLabels);

		jPanelSearchParameterFields.setLayout(new java.awt.GridLayout(7, 1));

		jTextFieldSearchDepth.setPreferredSize(new java.awt.Dimension(86, 22));
		jTextFieldSearchDepth.setFont(new java.awt.Font ("Dialog", 0, 10));
		jTextFieldSearchDepth.setText("0");
		jTextFieldSearchDepth.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jTextFieldSearchDepth.setMinimumSize(new java.awt.Dimension(86, 22));
		jPanelSearchParameterFields.add(jTextFieldSearchDepth);

		jTextFieldSearchCoverageMinimum.setPreferredSize(new java.awt.Dimension(86, 22));
		jTextFieldSearchCoverageMinimum.setFont(new java.awt.Font ("Dialog", 0, 10));
		jTextFieldSearchCoverageMinimum.setText("0");
		jTextFieldSearchCoverageMinimum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jTextFieldSearchCoverageMinimum.setMinimumSize(new java.awt.Dimension(86, 22));
		jPanelSearchParameterFields.add(jTextFieldSearchCoverageMinimum);

		jTextFieldSearchCoverageMaximum.setPreferredSize(new java.awt.Dimension(86, 22));
		jTextFieldSearchCoverageMaximum.setFont(new java.awt.Font ("Dialog", 0, 10));
		jTextFieldSearchCoverageMaximum.setText("0");
		jTextFieldSearchCoverageMaximum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jTextFieldSearchCoverageMaximum.setMinimumSize(new java.awt.Dimension(86, 22));
		jPanelSearchParameterFields.add(jTextFieldSearchCoverageMaximum);

		jTextFieldSubgroupsMaximum.setPreferredSize(new java.awt.Dimension(86, 22));
		jTextFieldSubgroupsMaximum.setFont(new java.awt.Font ("Dialog", 0, 10));
		jTextFieldSubgroupsMaximum.setText("0");
		jTextFieldSubgroupsMaximum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jTextFieldSubgroupsMaximum.setMinimumSize(new java.awt.Dimension(86, 22));
		jPanelSearchParameterFields.add(jTextFieldSubgroupsMaximum);

		jTextFieldSearchTimeMaximum.setPreferredSize(new java.awt.Dimension(86, 22));
		jTextFieldSearchTimeMaximum.setFont(new java.awt.Font ("Dialog", 0, 10));
		jTextFieldSearchTimeMaximum.setText("0");
		jTextFieldSearchTimeMaximum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jTextFieldSearchTimeMaximum.setMinimumSize(new java.awt.Dimension(86, 22));
		jPanelSearchParameterFields.add(jTextFieldSearchTimeMaximum);

		jPanelSearchParameters.add(jPanelSearchParameterFields);

		jPanelCenter.add(jPanelSearchParameters);

		jPanelSearchStrategy.setLayout(new javax.swing.BoxLayout(jPanelSearchStrategy, 0));
		jPanelSearchStrategy.setBorder(new javax.swing.border.TitledBorder(
			new javax.swing.border.EtchedBorder(), "search strategy", 4, 2,
			new java.awt.Font ("Dialog", 1, 11)));
		jPanelSearchStrategy.setFont(new java.awt.Font ("Dialog", 1, 12));

		jPanelSearchStrategyLabels.setLayout(new java.awt.GridLayout(7, 1));

		jLabelStrategyType.setText(" strategy type");
		jLabelStrategyType.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelSearchStrategyLabels.add(jLabelStrategyType);

		jLabelStrategyWidth.setText(" search width");
		jLabelStrategyWidth.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelSearchStrategyLabels.add(jLabelStrategyWidth);

		jLabelSearchStrategyNumericFrr.setText(" best numeric");
		jLabelSearchStrategyNumericFrr.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelSearchStrategyLabels.add(jLabelSearchStrategyNumericFrr);


		jPanelSearchStrategy.add(jPanelSearchStrategyLabels);

		jPanelSearchStrategyFields.setLayout(new java.awt.GridLayout(7, 1));

		jComboBoxSearchStrategyType.setPreferredSize(new java.awt.Dimension(86, 22));
		jComboBoxSearchStrategyType.setMinimumSize(new java.awt.Dimension(86, 22));
		jComboBoxSearchStrategyType.setFont(new java.awt.Font ("Dialog", 0, 10));
		jComboBoxSearchStrategyType.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jComboBoxSearchStrategyTypeActionPerformed(evt);
			}
		});
		jPanelSearchStrategyFields.add(jComboBoxSearchStrategyType);

		jTextFieldSearchStrategyWidth.setPreferredSize(new java.awt.Dimension(86, 22));
		jTextFieldSearchStrategyWidth.setFont(new java.awt.Font ("Dialog", 0, 10));
		jTextFieldSearchStrategyWidth.setText("0");
		jTextFieldSearchStrategyWidth.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jTextFieldSearchStrategyWidth.setMinimumSize(new java.awt.Dimension(86, 22));
		jPanelSearchStrategyFields.add(jTextFieldSearchStrategyWidth);

		jComboBoxNumeric.setPreferredSize(new java.awt.Dimension(86, 22));
		jComboBoxNumeric.setMinimumSize(new java.awt.Dimension(86, 22));
		jComboBoxNumeric.setFont(new java.awt.Font ("Dialog", 0, 10));
		jPanelSearchStrategyFields.add(jComboBoxNumeric);

		jPanelSearchStrategy.add(jPanelSearchStrategyFields);

		jPanelCenter.add(jPanelSearchStrategy);

		getContentPane().add(jPanelCenter, java.awt.BorderLayout.CENTER);

		jPanelWest.setPreferredSize(new java.awt.Dimension(5, 10));
		jPanelWest.setMinimumSize(new java.awt.Dimension(5, 10));

		getContentPane().add(jPanelWest, java.awt.BorderLayout.WEST);

		jPanelEast.setPreferredSize(new java.awt.Dimension(5, 10));
		jPanelEast.setMinimumSize(new java.awt.Dimension(5, 10));

		getContentPane().add(jPanelEast, java.awt.BorderLayout.EAST);

		jPanelNorth.setPreferredSize(new java.awt.Dimension(10, 5));
		jPanelNorth.setMinimumSize(new java.awt.Dimension(10, 5));

		getContentPane().add(jPanelNorth, java.awt.BorderLayout.NORTH);

		setJMenuBar(jMiningWindowMenuBar);
	}

	private void jMenuItemOpenDataModelActionPerformed(java.awt.event.ActionEvent evt)
	{
//		MRMLSource aSource = new MRMLSource();
//		if (aSource.isValid())
//		{
//			itsDataModel = new DataModel(aSource.getFile());
//			if (openDatabaseConnection())
//				initSafariiComponents();
//		}
	}

	private void jComboBoxSearchStrategyTypeActionPerformed(java.awt.event.ActionEvent evt)
	{
		if (getSearchStrategyName() == "best first")
			jTextFieldSearchStrategyWidth.setEnabled(false);
		else
			jTextFieldSearchStrategyWidth.setEnabled(true);
	}

	private void jComboBoxQualityMeasureActionPerformed(java.awt.event.ActionEvent evt)
	{
		initEvaluationMinimum();
	}

	private void jMenuItemAboutSafariiActionPerformed(java.awt.event.ActionEvent evt)
	{
		//TODO
		JOptionPane.showMessageDialog(null, "Subgroup Discovery", "About SubDisc", JOptionPane.INFORMATION_MESSAGE);
	}

	private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt)
	{
		Log.logCommandLine("exit");
		dispose();
		System.exit(0);
	}

	private void jComboBoxTargetAttributeActionPerformed(java.awt.event.ActionEvent evt)
	{
		int aTargetType = TargetConcept.getTypeCode(getTargetTypeName());

		if (getTargetAttributeName() != null &&
			(aTargetType == TargetConcept.SINGLE_NOMINAL || aTargetType == TargetConcept.MULTI_BINARY_CLASSIFICATION))
		{
			Log.logCommandLine("init");
			initTargetValueItems();
		}

		//has MiscField?
		if ((aTargetType == TargetConcept.SINGLE_NOMINAL) ||
			(aTargetType == TargetConcept.DOUBLE_REGRESSION) ||
			(aTargetType == TargetConcept.DOUBLE_CORRELATION) ||
			(aTargetType == TargetConcept.MULTI_BINARY_CLASSIFICATION))
		{
			jComboBoxMiscField.setVisible(true);
			jLabelMiscField.setVisible(true);
			if ((aTargetType == TargetConcept.SINGLE_NOMINAL) ||
				(aTargetType == TargetConcept.MULTI_BINARY_CLASSIFICATION))
				jLabelMiscField.setText(" target value");
			else
				jLabelMiscField.setText(" secondary target");
		}
		else
		{
			jComboBoxMiscField.setVisible(false);
			jLabelMiscField.setVisible(false);
		}

		//has secondary targets (JList)
		if ((aTargetType == TargetConcept.MULTI_LABEL) ||
			(aTargetType == TargetConcept.MULTI_BINARY_CLASSIFICATION))
		{
			jLabelSecondaryTargets.setVisible(true);
			jListSecondaryTargets.setVisible(true);
			SecondaryTargets.setVisible(true);
		}
		else
		{
			jLabelSecondaryTargets.setVisible(false);
			jListSecondaryTargets.setVisible(false);
			SecondaryTargets.setVisible(false);
		}

		//has target attribute?
		if (aTargetType == TargetConcept.MULTI_LABEL)
		{
			jLabelTargetAttribute.setVisible(false);
			jComboBoxTargetAttribute.setVisible(false);
		}
		else
		{
			jLabelTargetAttribute.setVisible(true);
			jComboBoxTargetAttribute.setVisible(true);
		}

		//has base model?
		if (aTargetType == TargetConcept.DOUBLE_CORRELATION ||
			aTargetType == TargetConcept.DOUBLE_REGRESSION ||
			aTargetType == TargetConcept.MULTI_LABEL)
			jButtonBaseModel.setEnabled(true);
		else
			jButtonBaseModel.setEnabled(false);
	}

	private void jComboBoxTargetTypeActionPerformed(java.awt.event.ActionEvent evt)
	{
		initQualityMeasure();
		initTargetAttributeItems();
	}


	private void jComboBoxMiscFieldActionPerformed(java.awt.event.ActionEvent evt)
	{
		if (getMiscFieldName() != null)
			initTargetInfo();
	}

	private void jListSecondaryTargetsActionPerformed(java.awt.event.ActionEvent evt)
	{
		if (getMiscFieldName() != null)
			initTargetInfo();
	}

	private void jButtonBaseModelActionPerformed(java.awt.event.ActionEvent evt)
	{
		try
		{
			SearchParameters aSearchParameters = new SearchParameters();
			initSearchParameters(aSearchParameters);
			TargetConcept aTargetConcept = new TargetConcept(getTargetTypeName(), 1);
			initTargetConcept(aTargetConcept);
			aSearchParameters.setTargetConcept(aTargetConcept);

			//TODO other types not implemented yet
			if (!aTargetConcept.isImplemented())
				return;

			ModelWindow aWindow;
			if (aTargetConcept.getTargetType() == TargetConcept.DOUBLE_REGRESSION)
			{
				Attribute aPrimaryTarget = aTargetConcept.getPrimaryTarget();
				Column aPrimaryColumn = itsTable.getColumn(aPrimaryTarget);
				Attribute aSecondaryTarget = aTargetConcept.getSecondaryTarget();
				Column aSecondaryColumn = itsTable.getColumn(aSecondaryTarget);

				aWindow = new ModelWindow(aPrimaryColumn, aSecondaryColumn, aPrimaryTarget.getName(), aSecondaryTarget.getName());
				aWindow.setLocation(50, 50);
				aWindow.setSize(700, 700);
				aWindow.setVisible(true);
				aWindow.setTitle("Base Model");
			}
			else if (aTargetConcept.getTargetType() == TargetConcept.DOUBLE_CORRELATION)
			{
				Attribute aPrimaryTarget = aTargetConcept.getPrimaryTarget();
				Column aPrimaryColumn = itsTable.getColumn(aPrimaryTarget);
				Attribute aSecondaryTarget = aTargetConcept.getSecondaryTarget();
				Column aSecondaryColumn = itsTable.getColumn(aSecondaryTarget);

				aWindow = new ModelWindow(aPrimaryColumn, aSecondaryColumn, aPrimaryTarget.getName(), aSecondaryTarget.getName());
				aWindow.setLocation(50, 50);
				aWindow.setSize(700, 700);
				aWindow.setVisible(true);
				aWindow.setTitle("Base Model");
			}
			else if (aTargetConcept.getTargetType() == TargetConcept.MULTI_LABEL)
			{
				//compute selected targets
				BitSet aSelectedColumns = new BitSet();
				int[] aSelection = jListSecondaryTargets.getSelectedIndices();
				for (int anIndex : aSelection)
					aSelectedColumns.set(itsTable.getBinaryIndex(anIndex));
				String[] aNames = new String[aSelectedColumns.cardinality()];
				for (int anIndex : aSelection)
					aNames[anIndex] = itsTable.getAttribute(itsTable.getBinaryIndex(anIndex)).getName();

				//compute base model
				Bayesian aBayesian = new Bayesian(new BinaryTable(itsTable, aSelectedColumns), aNames);
				aBayesian.climb();
				DAG aBaseDAG = aBayesian.getDAG();
				aBaseDAG.print();

				aWindow = new ModelWindow(aBaseDAG, 1200, 900);
				aWindow.setLocation(0, 0);
				aWindow.setSize(1200, 900);
				aWindow.setVisible(true);
				aWindow.setTitle("Base Model: Bayesian Network");
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}


	private void BrowseActionPerformed(java.awt.event.ActionEvent evt)
	{
		try
		{
			SearchParameters aSearchParameters = new SearchParameters();

//TODO
//			if (initSearchParameters(aSearchParameters))
//			{
//				BrowseWindow aBrowseWindow = new BrowseWindow(getDatabaseSample(itsDataModel, getMiscFieldName()), itsDataModel.getTargetTable(), null);
//				aBrowseWindow.setLocation(30, 150);
//				aBrowseWindow.setSize(800, 600);
//				aBrowseWindow.setVisible(true);
//			}
		}
		catch (Exception e)
		{
			ErrorWindow aWindow = new ErrorWindow(e);
			aWindow.setLocation(200, 200);
			aWindow.setVisible(true);
		}
	}

	private void DataExplorerActionPerformed(java.awt.event.ActionEvent evt)
	{
		//TODO
//		DataExplorerWindow aDataExplorerWindow = new DataExplorerWindow(itsDataModel);
//		aDataExplorerWindow.setLocation(30, 150);
//		aDataExplorerWindow.setTitle("Explore data model: " + itsDataModel.getName());
//		aDataExplorerWindow.setVisible(true);
	}

	private void jButtonSubgroupDiscoveryActionPerformed(java.awt.event.ActionEvent evt)
	{
		try
		{
			SearchParameters aSearchParameters = new SearchParameters();
			initSearchParameters(aSearchParameters);
			TargetConcept aTargetConcept = new TargetConcept(getTargetTypeName(), 1);
			initTargetConcept(aTargetConcept);
			aSearchParameters.setTargetConcept(aTargetConcept);

			//TODO other types not implemented yet
			if (!aTargetConcept.isImplemented())
				return;

			echoMiningStart(aSearchParameters);
			long aBegin = System.currentTimeMillis();

			SubgroupDiscovery aSubgroupDiscovery;
			if (aTargetConcept.getTargetType() == TargetConcept.SINGLE_NOMINAL)
				aSubgroupDiscovery = new SubgroupDiscovery(aSearchParameters, itsTable, itsPositiveCount);
			else if (aTargetConcept.getTargetType() == TargetConcept.MULTI_LABEL)
			{
				BitSet aSelectedColumns = new BitSet();
				int[] aSelection = jListSecondaryTargets.getSelectedIndices();
				for (int anIndex : aSelection)
					aSelectedColumns.set(itsTable.getBinaryIndex(anIndex));
				aSubgroupDiscovery = new SubgroupDiscovery(aSearchParameters, itsTable, aSelectedColumns);
			}
			else if (aTargetConcept.getTargetType() == TargetConcept.DOUBLE_REGRESSION)
			{
				aSubgroupDiscovery = new SubgroupDiscovery(aSearchParameters, itsTable, true);
			}
			else //if (aTargetConcept.getTargetType() == TargetConcept.DOUBLE_CORRELATION)
			{
				aSubgroupDiscovery = new SubgroupDiscovery(aSearchParameters, itsTable, false);
			}

			aSubgroupDiscovery.Mine(System.currentTimeMillis());

			//ResultWindow
			SubgroupSet aPreliminaryResults = aSubgroupDiscovery.getResult();
//			aPreliminaryResults.print();
			ResultWindow aResultWindow = new ResultWindow(aPreliminaryResults, aSearchParameters, null);
			aResultWindow.setLocation(0, 0);
			aResultWindow.setSize(1200, 900);
			aResultWindow.setVisible(true);

			long anEnd = System.currentTimeMillis();
			if (anEnd > aBegin + (long)(aSearchParameters.getMaximumTime()*60*1000))
				JOptionPane.showMessageDialog(null, "Mining process ended prematurely due to time limit.",
											  "Time Limit", JOptionPane.INFORMATION_MESSAGE);

		}
		catch (Exception e)
		{
			e.printStackTrace();
			ErrorWindow aWindow = new ErrorWindow(e);
			aWindow.setLocation(200, 200);
			aWindow.setVisible(true);
		}
	}

	private void jButtonRandomSubgroupsActionPerformed(java.awt.event.ActionEvent evt)
	{
		try
		{
			SearchParameters aSearchParameters = new SearchParameters();
			initSearchParameters(aSearchParameters);
			TargetConcept aTargetConcept = new TargetConcept(getTargetTypeName(), 1);
			initTargetConcept(aTargetConcept);
			aSearchParameters.setTargetConcept(aTargetConcept);
			QualityMeasure aQualityMeasure =
				new QualityMeasure(aSearchParameters.getQualityMeasure(), itsTable.getNrRows(), itsPositiveCount);

			Attribute aTarget = aSearchParameters.getTargetConcept().getPrimaryTarget();
			Condition aCondition = new Condition(aTarget, Condition.EQUALS);
			aCondition.setValue(aSearchParameters.getTargetConcept().getTargetValue());
			BitSet aBinaryTarget = itsTable.evaluate(aCondition);

			for (int i=0; i<100; i++)
			{
				Subgroup aSubgroup = itsTable.getRandomSubgroup(300); //TODO
				BitSet aColumnTarget = (BitSet)aBinaryTarget.clone();
				aColumnTarget.and(aSubgroup.getMembers());
				int aCountHeadBody = aColumnTarget.cardinality();
				double aQuality = aQualityMeasure.calculate(aCountHeadBody, aSubgroup.getCoverage());
				Log.logCommandLine("" + (i+1) + "," + aSubgroup.getCoverage() + "," + aQuality);
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
			ErrorWindow aWindow = new ErrorWindow(e);
			aWindow.setLocation(200, 200);
			aWindow.setVisible(true);
		}
	}

	private void jButtonRandomConditionsActionPerformed(java.awt.event.ActionEvent evt)
	{
		SearchParameters aSearchParameters = new SearchParameters();
		initSearchParameters(aSearchParameters);
		TargetConcept aTargetConcept = new TargetConcept(getTargetTypeName(), 1);
		initTargetConcept(aTargetConcept);
		aSearchParameters.setTargetConcept(aTargetConcept);

		//get targets
		BitSet aSelectedColumns = new BitSet();
		int[] aSelection = jListSecondaryTargets.getSelectedIndices();
		for (int anIndex : aSelection)
			aSelectedColumns.set(itsTable.getBinaryIndex(anIndex));

		//base model
		BinaryTable aBaseTable = new BinaryTable(itsTable, aSelectedColumns);
		Bayesian aBayesian = new Bayesian(aBaseTable);
		aBayesian.climb();
		QualityMeasure aQualityMeasure = new QualityMeasure(aBayesian.getDAG(), itsTable.getNrRows(), 0.5f, 1f);

		Random aRandom = new Random(System.currentTimeMillis());
		int aSize = 100;
		float aTotalQuality = 0.0f;
		for (int i=0; i<aSize; i++) //random conditions
		{
			ConditionList aCL;
			BitSet aMembers;
			do
			{
				aCL = new ConditionList();
				for (int j=0; j<aSearchParameters.getSearchDepth(); j++) //j conditions
				{
					Attribute anAttribute;
					do
					{
						anAttribute = itsTable.getAttribute(aRandom.nextInt(itsTable.getNrColumns()));
					}
					while (!anAttribute.isNumericType());
					int anOperator = aRandom.nextBoolean()?Condition.LESS_THAN_OR_EQUAL:Condition.GREATER_THAN_OR_EQUAL;
					Condition aCondition = new Condition(anAttribute, anOperator);
					float aMin = itsTable.getColumn(anAttribute).getMin();
					float aMax = itsTable.getColumn(anAttribute).getMax();
					aCondition.setValue(Float.toString(aMin + (aMax-aMin)/4 + (aMax-aMin)*aRandom.nextFloat()/2));
					aCL.addCondition(aCondition);
				}
				aMembers = itsTable.evaluate(aCL);
			}
			while (aMembers.cardinality() < aSearchParameters.getMinimumCoverage());
			//Log.logCommandLine(aCL.toString());
			Subgroup aSubgroup = new Subgroup(aCL, aMembers, aCL.size());

			//build model
			BinaryTable aBinaryTable = aBaseTable.selectRows(aMembers);
			aBayesian = new Bayesian(aBinaryTable);
			aBayesian.climb();
			DAG aDAG = aBayesian.getDAG();
			aSubgroup.setDAG(aDAG); //store DAG with subgroup for later use

			double aQuality = aQualityMeasure.calculateEDIT_DISTANCE(aSubgroup);
			aTotalQuality += aQuality;
			Log.logCommandLine("" + (i+1) + "," + aSubgroup.getCoverage() + "," + aQuality);
		}
		Log.logCommandLine("average quality " + aTotalQuality/aSize);
	}

	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt)
	{
		dispose();
		System.exit(0);
	}

	private void initSearchParameters(SearchParameters theSearchParameters)
	{
//		theSearchParameters.setTarget(itsTable.getAttribute(getTargetAttributeName()));
//		theSearchParameters.setTargetAttributeShort(getTargetAttributeName());
//		theSearchParameters.setTargetValue(getMiscFieldName());			//only makes sense for certain target concepts

		theSearchParameters.setQualityMeasure(getQualityMeasureName());
		theSearchParameters.setQualityMeasureMinimum(getQualityMeasureMinimum().floatValue());

		theSearchParameters.setSearchDepth(getSearchDepthMaximum().intValue());
		theSearchParameters.setMinimumCoverage(getSearchCoverageMinimum().intValue());
		theSearchParameters.setMaximumCoverage(getSearchCoverageMaximum().floatValue());
		theSearchParameters.setMaximumSubgroups(getSubgroupsMaximum().intValue());
		theSearchParameters.setMaximumTime(getSearchTimeMaximum().floatValue());

		theSearchParameters.setSearchStrategy(getSearchStrategyName());
		theSearchParameters.setSearchStrategyWidth(getSearchStrategyWidth().intValue());
		theSearchParameters.setNumericStrategy(getNumericStrategy());
		theSearchParameters.setNrSplitPoints(7);

		theSearchParameters.setPostProcessingCount(20);
		theSearchParameters.setMaximumPostProcessingSubgroups(100);

		//bayesian stuff
		theSearchParameters.setAlpha(0.5f);
		theSearchParameters.setBeta(1f);
	}

	private void initTargetConcept(TargetConcept theTC)
	{
		Attribute aTarget = itsTable.getAttribute(getTargetAttributeName());
		theTC.setPrimaryTarget(aTarget);

		//target value
		if ((theTC.getTargetType() == TargetConcept.SINGLE_NOMINAL) ||
			(theTC.getTargetType() == TargetConcept.MULTI_BINARY_CLASSIFICATION))
			theTC.setTargetValue(getMiscFieldName());

		//secondary target
		if ((theTC.getTargetType() == TargetConcept.DOUBLE_CORRELATION) ||
			(theTC.getTargetType() == TargetConcept.DOUBLE_REGRESSION))
			theTC.setSecondaryTarget(itsTable.getAttribute(getMiscFieldName()));

		//TODO add more details of target concept from GUI
	}

	public void echoMiningStart(SearchParameters theSearchParameters)
	{
		String aString = new String("Mining process started");
		Log.logCommandLine(aString);
	}

	public void echoMiningEnd(long theMilliSeconds, int theNumberOfSubgroups)
	{
		int seconds = Math.round(theMilliSeconds / 1000);
		int minutes = Math.round(theMilliSeconds / 60000);
		int secondsRemainder = seconds - (minutes * 60);
		String aString = new String("Mining process finished in " + minutes + " minutes and " + secondsRemainder + " seconds.\n");

		if (theNumberOfSubgroups == 0)
			aString += "   No subgroups found that match the search criterion.\n";
		else if (theNumberOfSubgroups == 1)
			aString += "   1 subgroup found.\n";
		else
			aString += "   " + theNumberOfSubgroups + " subgroups found.\n";
		Log.logCommandLine(aString);
	}


	/* INITIALIZATION METHODS OF Window COMPONENTS */

	private	void initTargetAttributeItems()
	{
		int aTargetType = TargetConcept.getTypeCode(getTargetTypeName());

		//clear all
		removeAllTargetAttributeItems();
		if ((aTargetType == TargetConcept.DOUBLE_REGRESSION) ||
			(aTargetType == TargetConcept.DOUBLE_CORRELATION))
			removeAllMiscFieldItems();

		//primary target and MiscField
		boolean isEmpty = true;
		for (int i = 0; i < itsTable.getNrColumns(); i++)
		{
			Attribute anAttribute = itsTable.getAttribute(i);
			if ((aTargetType == TargetConcept.SINGLE_NOMINAL && anAttribute.isNominalType()) ||
				(aTargetType == TargetConcept.SINGLE_NOMINAL && anAttribute.isBinaryType()) ||
				(aTargetType == TargetConcept.SINGLE_NUMERIC && anAttribute.isNumericType()) ||
				(aTargetType == TargetConcept.SINGLE_ORDINAL && anAttribute.isNumericType()) ||
				(aTargetType == TargetConcept.DOUBLE_REGRESSION && anAttribute.isNumericType()) ||
				(aTargetType == TargetConcept.DOUBLE_CORRELATION && anAttribute.isNumericType()) ||
				(aTargetType == TargetConcept.MULTI_LABEL && anAttribute.isNumericType()) ||
				(aTargetType == TargetConcept.MULTI_BINARY_CLASSIFICATION && anAttribute.isBinaryType()) |
				(aTargetType == TargetConcept.MULTI_BINARY_CLASSIFICATION && anAttribute.isNominalType()))
			{
				addTargetAttributeItem(itsTable.getAttribute(i).getName());
				if ((aTargetType == TargetConcept.DOUBLE_REGRESSION) ||
					(aTargetType == TargetConcept.DOUBLE_CORRELATION))
					addMiscFieldItem(itsTable.getAttribute(i).getName());

				isEmpty = false;
			}
		}
		if (aTargetType == TargetConcept.SINGLE_NOMINAL && isEmpty) // no target attribute selected
			removeAllMiscFieldItems();

		//secondary targets =======================================
		if (TargetConcept.isEMM(getTargetTypeName()))
		{
			int aCount = 0;
			for (int i = 0; i < itsTable.getNrColumns(); i++)
			{
				Attribute anAttribute = itsTable.getAttribute(i);
				if ((aTargetType == TargetConcept.DOUBLE_REGRESSION && anAttribute.isNumericType()) ||
					(aTargetType == TargetConcept.DOUBLE_CORRELATION && anAttribute.isNumericType()) ||
					(aTargetType == TargetConcept.MULTI_LABEL && anAttribute.isBinaryType()) ||
					(aTargetType == TargetConcept.MULTI_BINARY_CLASSIFICATION && anAttribute.isNominalType()))
				{
					addSecondaryTargetsItem(itsTable.getAttribute(i).getName());
					isEmpty = false;
					aCount++;
				}
			}
			jListSecondaryTargets.setSelectionInterval(0, aCount-1);
		}
	}

	private	void initTargetValueItems()
	{
		removeAllMiscFieldItems();
		if (jComboBoxTargetAttribute.getItemCount() == 0) // no attributes for selected target concept type?
			return;

		//single target attribute
//		if (!TargetConcept.isEMM(getTargetTypeName()))
//		{
			Attribute aTarget = itsTable.getAttribute(getTargetAttributeName());
			TreeSet<String> aValues = itsTable.getDomain(aTarget.getIndex());
			for (String aValue : aValues)
				addMiscFieldItem(aValue);
//		}
	}

	private void initTargetInfo()
	{
		int aTargetType = TargetConcept.getTypeCode(getTargetTypeName());
		switch(aTargetType)
		{
			case TargetConcept.SINGLE_NOMINAL:
			{
				Attribute aTarget = itsTable.getAttribute(getTargetAttributeName());
				String aSelectedTargetValue = getMiscFieldName();
				itsPositiveCount = itsTable.countValues(aTarget.getIndex(), aSelectedTargetValue);
				float aPercentage = ((float)itsPositiveCount * 100f)/(float)itsTotalCount;
				NumberFormat aFormatter = NumberFormat.getNumberInstance();
				aFormatter.setMaximumFractionDigits(1);
				jLFieldTargetInfo.setText(itsPositiveCount + " (" + aFormatter.format(aPercentage) + " %)");
				jLabelTargetInfo.setText(" # positive");
				break;
			}
			case TargetConcept.SINGLE_NUMERIC:
			{
				Attribute aTarget = itsTable.getAttribute(getTargetAttributeName());
				itsTargetAverage = itsTable.getAverage(aTarget.getIndex());
				jLabelTargetInfo.setText(" average");
				jLFieldTargetInfo.setText("" + itsTargetAverage);
				break;
			}
			case TargetConcept.SINGLE_ORDINAL				:
			case TargetConcept.DOUBLE_REGRESSION			:
			case TargetConcept.DOUBLE_CORRELATION			:
			{
				TargetConcept aTargetConcept = new TargetConcept(getTargetTypeName(), 1);
				initTargetConcept(aTargetConcept);
				Attribute aPrimaryTarget = aTargetConcept.getPrimaryTarget();
				Column aPrimaryColumn = itsTable.getColumn(aPrimaryTarget);
				Attribute aSecondaryTarget = aTargetConcept.getSecondaryTarget();
				Column aSecondaryColumn = itsTable.getColumn(aSecondaryTarget);
				CorrelationMeasure aCM = new CorrelationMeasure(QualityMeasure.CORRELATION_R, aPrimaryColumn, aSecondaryColumn);
				jLabelTargetInfo.setText(" correlation");
				jLFieldTargetInfo.setText("" + Double.toString(aCM.getEvaluationMeasureValue()));
				break;
			}
			case TargetConcept.MULTI_LABEL					:
			case TargetConcept.MULTI_BINARY_CLASSIFICATION	:
			{
				jLabelTargetInfo.setText(" target info");
				jLFieldTargetInfo.setText("none");
				break;
			}
		}

		setSearchCoverageMinimum(Integer.toString(itsTotalCount/10));
	}


	private	void initTargetType()
	{
		removeAllTargetTypeItems();
		for (int i = TargetConcept.getFirstTargetType(); i <= TargetConcept.getLastTargetType(); i++)
			if (TargetConcept.isImplemented(i))
				addTargetTypeItem(TargetConcept.getTypeString(i));
	}

	private	void initQualityMeasure()
	{
		removeAllQualityMeasureItems();
		int aTargetType = TargetConcept.getTypeCode(getTargetTypeName());
		for (int i = QualityMeasure.getFirstEvaluationMesure(aTargetType); i <= QualityMeasure.getLastEvaluationMesure(aTargetType); i++)
			addQualityMeasureItem(QualityMeasure.getMeasureString(i));
		initEvaluationMinimum();
	}

	private	void initEvaluationMinimum()
	{
		if (getQualityMeasureName() != null)
			setQualityMeasureMinimumName(QualityMeasure.getMeasureMinimum(getQualityMeasureName(), itsTargetAverage));
	}

	private	void initSearchDepthMaximum() { setSearchDepthMaximum("1"); }

	private	void initSearchStrategyItems()
	{
		removeAllSearchStrategyItems();
		for (int i = 0; i <= CandidateQueue.LAST_SEARCH_STRATEGY; i++)
			addSearchStrategyItem(SearchParameters.getSearchStrategyName(i));
	}

	private	void initSearchStrategyWidth() { setSearchStrategyWidth("100"); }

	private	void initNumericStrategy()
	{
		removeAllNumericStrategyItems();
		for (int i = 0; i <= SearchParameters.LAST_NUMERIC; i++)
			addNumericStrategyItem(SearchParameters.getNumericStrategyName(i));
	}

	/* FIELD METHODS OF SAFARII COMPONENTS */
	private void removeAllTargetAttributeItems() { jComboBoxTargetAttribute.removeAllItems(); }
	private void addTargetAttributeItem(String anItem) { jComboBoxTargetAttribute.addItem(anItem); }
	private void removeAllSecondaryTargetsItems() { jListSecondaryTargets.removeAll(); }
	private void addSecondaryTargetsItem(String theItem)
	{
		DefaultListModel aModel = (DefaultListModel) (jListSecondaryTargets.getModel());
		int anEnd = aModel.getSize();
		aModel.add(anEnd, theItem);
	}
	private String getTargetAttributeName() { return (String)jComboBoxTargetAttribute.getSelectedItem(); }
	private void removeAllMiscFieldItems() { jComboBoxMiscField.removeAllItems(); }
	private void addMiscFieldItem(String anItem) { jComboBoxMiscField.addItem(anItem); }
	private String getMiscFieldName() { return (String)jComboBoxMiscField.getSelectedItem(); }
	private void removeAllQualityMeasureItems() { jComboBoxQualityMeasure.removeAllItems(); }
	private void addQualityMeasureItem(String anItem) { jComboBoxQualityMeasure.addItem(anItem); }
	private String getQualityMeasureName() { return (String)jComboBoxQualityMeasure.getSelectedItem(); }
	private void removeAllTargetTypeItems() { jComboBoxTargetType.removeAllItems(); }
	private void addTargetTypeItem(String anItem) { jComboBoxTargetType.addItem(anItem); }
	private String getTargetTypeName() { return (String)jComboBoxTargetType.getSelectedItem(); }
	private void setQualityMeasureMinimumName(String aValue) { jTextFieldQualityMeasureMinimum.setText(aValue); }
	private Float getQualityMeasureMinimum() {
		float aMinimum;
		try {
			aMinimum = Float.parseFloat(jTextFieldQualityMeasureMinimum.getText().trim());
		} catch (Exception ex) { return null; }
		return new Float(aMinimum);
	}
	private	void	setSearchDepthMaximum(String aValue) { jTextFieldSearchDepth.setText(aValue); }
	private	Integer		getSearchDepthMaximum() {
		int aMaximum;
		try {
			aMaximum = Integer.parseInt(jTextFieldSearchDepth.getText().trim());
		} catch (Exception ex) { return null; }
		return new Integer(aMaximum);
	}
	private	void	setSearchCoverageMinimum(String aValue) { jTextFieldSearchCoverageMinimum.setText(aValue); }
	private	void	setSearchCoverageMaximum(String aValue) { jTextFieldSearchCoverageMaximum.setText(aValue); }
	private	void	setSubgroupsMaximum(String aValue) { jTextFieldSubgroupsMaximum.setText(aValue); }
	private	void	setSearchTimeMaximum(String aValue) { jTextFieldSearchTimeMaximum.setText(aValue); }
	private	Integer	getSearchCoverageMinimum()
	{
		int aMinimum;
		try {
			aMinimum = Integer.parseInt(jTextFieldSearchCoverageMinimum.getText().trim());
		} catch (Exception ex) { return null; }
		return new Integer(aMinimum);
	}
	private	Float getSearchCoverageMaximum()
	{
		float aMaximum;
		try {
			aMaximum = Float.parseFloat(jTextFieldSearchCoverageMaximum.getText().trim());
		} catch (Exception ex) { return null; }
		return new Float(aMaximum);
	}
	private	Integer getSubgroupsMaximum()
	{
		int aMaximum;
		try {
			aMaximum = Integer.parseInt(jTextFieldSubgroupsMaximum.getText().trim());
		} catch (Exception ex) { return null; }
		return new Integer(aMaximum);
	}
	private	Float getSearchTimeMaximum()
	{
		float aMaximum;
		try {
			aMaximum = Float.parseFloat(jTextFieldSearchTimeMaximum.getText().trim());
		} catch (Exception ex) { return null; }
		return new Float(aMaximum);
	}

	//search strategy
	private void removeAllSearchStrategyItems() { jComboBoxSearchStrategyType.removeAllItems(); }
	private	void	addSearchStrategyItem(String anItem) { jComboBoxSearchStrategyType.addItem(anItem); }
	private	String	getSearchStrategyName() { return (String)jComboBoxSearchStrategyType.getSelectedItem(); }

	//search width
	private	void	setSearchStrategyWidth(String aValue) { jTextFieldSearchStrategyWidth.setText(aValue); }
	private	Integer	getSearchStrategyWidth()
	{
		int aWidth;
		try {
			aWidth = Integer.parseInt(jTextFieldSearchStrategyWidth.getText().trim());
		} catch (Exception ex) { return null; }
		return new Integer(aWidth);
	}

	//numeric strategy
	private	String getNumericStrategy() { return (String)jComboBoxNumeric.getSelectedItem(); }
	private void removeAllNumericStrategyItems() { jComboBoxNumeric.removeAllItems(); }
	private	void addNumericStrategyItem(String anItem) { jComboBoxNumeric.addItem(anItem); }

	private javax.swing.JMenuBar jMiningWindowMenuBar;
	private javax.swing.JMenu jMenuFile;
	private javax.swing.JMenuItem jMenuItemOpenDataModel;
	private javax.swing.JMenuItem jMenuItemShowDataModel;
	private javax.swing.JMenuItem jMenuItemDataExplorer;
	private javax.swing.JMenuItem jMenuItemBrowseTarget;
	private javax.swing.JSeparator jSeparator2;
	private javax.swing.JMenuItem jMenuItemSubgroupDiscovery;
	private javax.swing.JSeparator jSeparator3;
	private javax.swing.JMenuItem jMenuItemExit;
	private javax.swing.JMenu jMenuAbout;
	private javax.swing.JMenuItem jMenuItemAboutSafarii;
	private javax.swing.JPanel jPanelSouth;
	private javax.swing.JLabel jLabelLayoutFiller0;
	private javax.swing.JPanel jPanelLayoutFiller1;
	private javax.swing.JPanel jPanelMineButtons;
	private javax.swing.JButton jButtonDataModel;
	private javax.swing.JButton jButtonDataExplorer;
	private javax.swing.JButton jButtonBrowse;
	private javax.swing.JButton jButtonSubgroupDiscovery;
	private JButton jButtonRandomSubgroups;
	private JButton jButtonRandomConditions;
	private javax.swing.JPanel jPanelLayoutFiller2;
	private javax.swing.JLabel jLabelLayoutFiller3;
	private javax.swing.JPanel jPanelCenter;
	private javax.swing.JPanel jPanelRuleTarget;
	private javax.swing.JPanel jPanelRuleTargetLabels;
	private javax.swing.JLabel jLabelTargetTable;
	private javax.swing.JLabel jLabelTargetAttribute;
	private javax.swing.JLabel jLabelMiscField;
	private javax.swing.JLabel jLabelSecondaryTargets;
	private javax.swing.JLabel jLabelNrExamples;
	private javax.swing.JLabel jLabelNrColumns;
	private javax.swing.JLabel jLabelTargetInfo;
	private javax.swing.JPanel jPanelRuleTargetFields;
	private javax.swing.JLabel jLFieldTargetTable;
	private javax.swing.JComboBox jComboBoxTargetAttribute;
	private javax.swing.JComboBox jComboBoxMiscField;
	private javax.swing.JList jListSecondaryTargets;
	private javax.swing.JScrollPane SecondaryTargets;
	private javax.swing.JLabel jLFieldNrExamples;
	private javax.swing.JLabel jLFieldNrColumns;
	private javax.swing.JLabel jLFieldTargetInfo;
	private JButton jButtonBaseModel;
	private javax.swing.JPanel jPanelRuleEvaluation;
	private javax.swing.JPanel jPanelEvaluationLabels;
	private javax.swing.JLabel jLabelTargetType;
	private javax.swing.JLabel jLabelQualityMeasure;
	private javax.swing.JLabel jLabelEvaluationTreshold;
	private javax.swing.JPanel jPanelEvaluationFields;
	private javax.swing.JComboBox jComboBoxQualityMeasure;
	private javax.swing.JComboBox jComboBoxTargetType;
	private javax.swing.JTextField jTextFieldQualityMeasureMinimum;
	private javax.swing.JPanel jPanelSearchParameters;
	private javax.swing.JPanel jPanelSearchParameterLabels;
	private javax.swing.JLabel jLabelSearchDepth;
	private javax.swing.JLabel jLabelSearchCoverageMinimum;
	private javax.swing.JLabel jLabelSearchCoverageMaximum;
	private javax.swing.JLabel jLabelSubgroupsMaximum;
	private javax.swing.JLabel jLabelSearchTimeMaximum;
	private javax.swing.JPanel jPanelSearchParameterFields;
	private javax.swing.JTextField jTextFieldSearchDepth;
	private javax.swing.JTextField jTextFieldSearchCoverageMinimum;
	private javax.swing.JTextField jTextFieldSearchCoverageMaximum;
	private javax.swing.JTextField jTextFieldSubgroupsMaximum;
	private javax.swing.JTextField jTextFieldSearchTimeMaximum;
	private javax.swing.JPanel jPanelSearchStrategy;
	private javax.swing.JPanel jPanelSearchStrategyLabels;
	private javax.swing.JLabel jLabelStrategyType;
	private javax.swing.JLabel jLabelStrategyWidth;
	private javax.swing.JLabel jLabelSearchStrategyNumericFrr;
	private javax.swing.JPanel jPanelSearchStrategyFields;
	private javax.swing.JComboBox jComboBoxSearchStrategyType;
	private javax.swing.JTextField jTextFieldSearchStrategyWidth;
	private javax.swing.JComboBox jComboBoxNumeric;
	private javax.swing.JPanel jPanelWest;
	private javax.swing.JPanel jPanelEast;
	private javax.swing.JPanel jPanelNorth;
}
