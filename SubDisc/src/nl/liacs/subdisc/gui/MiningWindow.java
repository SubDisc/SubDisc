package nl.liacs.subdisc.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.List;
import java.util.Random;
import java.util.TreeSet;

import javax.swing.AbstractButton;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import nl.liacs.subdisc.*;
import nl.liacs.subdisc.FileHandler.Action;
import nl.liacs.subdisc.SearchParameters.NumericStrategy;
import nl.liacs.subdisc.TargetConcept.TargetType;

public class MiningWindow extends JFrame
{
	static final long serialVersionUID = 1L;

	// TODO get image
	public static final Image ICON = Toolkit.getDefaultToolkit().getImage(MiningWindow.class.getResource("/icon.gif"));

	private Table itsTable;
	private int itsTotalCount;

	// target info
	private int itsPositiveCount; // nominal target
	private double itsTargetAverage; // numeric target

	// TODO there should be at most 1 MiningWindow();
	private SearchParameters itsSearchParameters = SearchParameters.THE_ONLY_INSTANCE;
	private TargetConcept itsTargetConcept = TargetConcept.THE_ONLY_INSTANCE;

	public MiningWindow()
	{
		initMiningWindow();
		enableTableDependentComponents(false);
	}

	public MiningWindow(Table theTable)
	{
		itsTable = theTable; // TODO check successful loading of Table
		initMiningWindow();
		initGuiComponents();
	}

	private void initMiningWindow()
	{
		// Initialise graphical components
		initComponents();
		setTitle("Subgroup Discovery");
		// setIconImage(ICON);
		pack();
		setSize(700, 600);

		// Open log/debug files
		Log.openFileOutputStreams();
	}

	private void initGuiComponents()
	{
		if(itsTable == null)
			return; // MM avoids crash TODO report unsuccessful loading to user

		// set dataset properties
		jLFieldTargetTable.setText(itsTable.itsName);
		itsTotalCount = itsTable.getNrRows();
		jLFieldNrExamples.setText(String.valueOf(itsTotalCount));
		jLFieldNrColumns.setText(String.valueOf(itsTable.getNrColumns()));
		setSearchCoverageMaximum("1.0");

		initTargetType();
		setSearchDepthMaximum("1");
		setSubgroupsMaximum("50");
		setSearchTimeMaximum("1.0");
		initSearchStrategyItems();
		setSearchStrategyWidth("100");
		initNumericStrategy();
		enableTableDependentComponents(true); // TODO could check if already visible, no baseModel for all

		switch(itsTargetConcept.getTargetType())
		{
			case DOUBLE_CORRELATION :
			case DOUBLE_REGRESSION	:
			case MULTI_LABEL		: break;
			default : jButtonBaseModel.setEnabled(false); break;
		}
	}

	/**
	 * This method is called from within the constructor to Initialise the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the FormEditor.
	 */
	private void initComponents()
	{
		jMiningWindowMenuBar = new JMenuBar();
		jMenuFile = new JMenu();
		jMenuItemOpenFile = new JMenuItem();
		// jMenuItemShowDataModel = new JMenuItem();
		jMenuItemDataExplorer = new JMenuItem();
		jMenuItemBrowseTarget = new JMenuItem();
		jSeparator2 = new JSeparator();
		jMenuItemSubgroupDiscovery = new JMenuItem();
		jSeparator3 = new JSeparator();
		jMenuItemExit = new JMenuItem();
		jMenuAbout = new JMenu();
		jMenuItemAboutSubDisc = new JMenuItem();
		jPanelSouth = new JPanel();
		jLabelLayoutFiller0 = new JLabel();
		jPanelLayoutFiller1 = new JPanel();
		jPanelMineButtons = new JPanel();
		// jButtonDataModel = new JButton();
		jButtonDataExplorer = new JButton();
		jButtonBrowse = new JButton();
		jButtonSubgroupDiscovery = new JButton();
		jButtonRandomSubgroups = new JButton();
		jButtonRandomConditions = new JButton();
		jPanelLayoutFiller2 = new JPanel();
		jLabelLayoutFiller3 = new JLabel();
		jPanelCenter = new JPanel();
		jPanelRuleTarget = new JPanel();
		jPanelRuleTargetLabels = new JPanel();
		jLabelTargetTable = new JLabel();
		jLabelTargetAttribute = new JLabel();
		jLabelMiscField = new JLabel(); // used for target value or secondary target
		jLabelSecondaryTargets = new JLabel();
		jLabelNrExamples = new JLabel();
		jLabelNrColumns = new JLabel();
		jLabelTargetInfo = new JLabel();
		jPanelRuleTargetFields = new JPanel();
		jLFieldTargetTable = new JLabel();
		jComboBoxTargetAttribute = new JComboBox();
		jComboBoxMiscField = new JComboBox(); // used for target value or secondary target
		jListSecondaryTargets = new JList(new DefaultListModel());
		SecondaryTargets = new JScrollPane(jListSecondaryTargets);
		jLFieldNrExamples = new JLabel();
		jLFieldNrColumns = new JLabel();
		jLFieldTargetInfo = new JLabel();
		jButtonBaseModel = new JButton();
		jPanelRuleEvaluation = new JPanel();
		jPanelEvaluationLabels = new JPanel();
		jLabelTargetType = new JLabel();
		jLabelQualityMeasure = new JLabel();
		jLabelEvaluationTreshold = new JLabel();
		jPanelEvaluationFields = new JPanel();
		jComboBoxTargetType = new JComboBox();
		jComboBoxQualityMeasure = new JComboBox();
		jTextFieldQualityMeasureMinimum = new JTextField();
		jPanelSearchParameters = new JPanel();
		jPanelSearchParameterLabels = new JPanel();
		jLabelSearchDepth = new JLabel();
		jLabelSearchCoverageMinimum = new JLabel();
		jLabelSearchCoverageMaximum = new JLabel();
		jLabelSubgroupsMaximum = new JLabel();
		jLabelSearchTimeMaximum = new JLabel();
		jPanelSearchParameterFields = new JPanel();
		jTextFieldSearchDepth = new JTextField();
		jTextFieldSearchCoverageMinimum = new JTextField();
		jTextFieldSearchCoverageMaximum = new JTextField();
		jTextFieldSubgroupsMaximum = new JTextField();
		jTextFieldSearchTimeMaximum = new JTextField();
		jPanelSearchStrategy = new JPanel();
		jPanelSearchStrategyLabels = new JPanel();
		jLabelStrategyType = new JLabel();
		jLabelStrategyWidth = new JLabel();
		jLabelSearchStrategyNumericFrr = new JLabel();
		jPanelSearchStrategyFields = new JPanel();
		jComboBoxSearchStrategyType = new JComboBox();
		jTextFieldSearchStrategyWidth = new JTextField();
		jComboBoxNumeric = new JComboBox();
		jPanelWest = new JPanel();
		jPanelEast = new JPanel();
		jPanelNorth = new JPanel();
		jMiningWindowMenuBar.setFont(new Font("Dialog", 0, 10));

		jMenuFile.setFont(new Font("Dialog", 0, 10));
		jMenuFile.setText("File");
		jMenuFile.setMnemonic('F');

		jMenuItemOpenFile.setFont(new Font("Dialog", 0, 10));
		jMenuItemOpenFile.setText("Open File");
		jMenuItemOpenFile.setMnemonic('O');
		jMenuItemOpenFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_MASK));
		jMenuItemOpenFile.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jMenuItemOpenFileActionPerformed(evt);
			}
		});
		jMenuFile.add(jMenuItemOpenFile);

		jMenuItemDataExplorer.setFont(new Font("Dialog", 0, 10));
		jMenuItemDataExplorer.setText("Data Explorer");
		jMenuItemDataExplorer.setMnemonic('E');
		jMenuItemDataExplorer.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, InputEvent.CTRL_MASK));
		jMenuItemDataExplorer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				DataExplorerActionPerformed(evt);
			}
		});
		jMenuFile.add(jMenuItemDataExplorer);

		jMenuItemBrowseTarget.setFont(new Font("Dialog", 0, 10));
		jMenuItemBrowseTarget.setText("Browse");
		jMenuItemBrowseTarget.setMnemonic('B');
		jMenuItemBrowseTarget.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B, InputEvent.CTRL_MASK));
		jMenuItemBrowseTarget.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				BrowseActionPerformed(evt);
			}
		});
		jMenuFile.add(jMenuItemBrowseTarget);

		jMenuFile.add(jSeparator2);

		jMenuItemSubgroupDiscovery.setFont(new Font("Dialog", 0, 10));
		jMenuItemSubgroupDiscovery.setText("Subgroup Discovery");
		jMenuItemSubgroupDiscovery.setMnemonic('S');
		jMenuItemSubgroupDiscovery.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_MASK));
		jMenuItemSubgroupDiscovery.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jButtonSubgroupDiscoveryActionPerformed(evt);
			}
		});
		jMenuFile.add(jMenuItemSubgroupDiscovery);

		jMenuFile.add(jSeparator3);

		jMenuItemExit.setFont(new Font("Dialog", 0, 10));
		jMenuItemExit.setText("Exit");
		jMenuItemExit.setMnemonic('X');
		jMenuItemExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.CTRL_MASK));
		jMenuItemExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jMenuItemExitActionPerformed(evt);
			}
		});
		jMenuFile.add(jMenuItemExit);
		jMiningWindowMenuBar.add(jMenuFile);

		jMenuAbout.setFont(new Font("Dialog", 0, 10));
		jMenuAbout.setText("About");
		jMenuAbout.setMnemonic('A');

		jMenuItemAboutSubDisc.setFont(new Font("Dialog", 0, 10));
		jMenuItemAboutSubDisc.setText("SubDisc");
		jMenuItemAboutSubDisc.setMnemonic('I');
		jMenuItemAboutSubDisc.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I, InputEvent.CTRL_MASK));
		jMenuItemAboutSubDisc.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jMenuItemAboutSubDiscActionPerformed(evt);
			}
		});
		jMenuAbout.add(jMenuItemAboutSubDisc);
		jMiningWindowMenuBar.add(jMenuAbout);
		setFont(new Font("Dialog", 0, 10));
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent evt) {
				exitForm(evt);
			}
		});

		jPanelSouth.setFont(new Font("Dialog", 0, 10));

		jLabelLayoutFiller0.setPreferredSize(new Dimension(0, 40));
		jLabelLayoutFiller0.setMinimumSize(new Dimension(0, 40));
		jPanelSouth.add(jLabelLayoutFiller0);

		jPanelSouth.add(jPanelLayoutFiller1);

		jPanelMineButtons.setMinimumSize(new Dimension(0, 40));

		jButtonDataExplorer.setPreferredSize(new Dimension(100, 25));
		jButtonDataExplorer.setBorder(new BevelBorder(0));
		jButtonDataExplorer.setMaximumSize(new Dimension(95, 25));
		jButtonDataExplorer.setFont(new Font("Dialog", 1, 11));
		jButtonDataExplorer.setText("Data Explorer");
		jButtonDataExplorer.setMinimumSize(new Dimension(82, 25));
		jButtonDataExplorer.setMnemonic('E');
		jButtonDataExplorer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				DataExplorerActionPerformed(evt);
			}
		});
		jPanelMineButtons.add(jButtonDataExplorer);

		jButtonBrowse.setPreferredSize(new Dimension(80, 25));
		jButtonBrowse.setBorder(new BevelBorder(0));
		jButtonBrowse.setMaximumSize(new Dimension(95, 25));
		jButtonBrowse.setFont(new Font("Dialog", 1, 11));
		jButtonBrowse.setText("Browse");
		jButtonBrowse.setMinimumSize(new Dimension(82, 25));
		jButtonBrowse.setMnemonic('B');
		jButtonBrowse.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				BrowseActionPerformed(evt);
			}
		});
		jPanelMineButtons.add(jButtonBrowse);

		jButtonSubgroupDiscovery.setPreferredSize(new Dimension(120, 25));
		jButtonSubgroupDiscovery.setBorder(new BevelBorder(0));
		jButtonSubgroupDiscovery.setMaximumSize(new Dimension(130, 25));
		jButtonSubgroupDiscovery.setFont(new Font("Dialog", 1, 11));
		jButtonSubgroupDiscovery.setText("Subgroup Discovery");
		jButtonSubgroupDiscovery.setMinimumSize(new Dimension(82, 25));
		jButtonSubgroupDiscovery.setMnemonic('S');
		jButtonSubgroupDiscovery.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jButtonSubgroupDiscoveryActionPerformed(evt);
			}
		});
		jPanelMineButtons.add(jButtonSubgroupDiscovery);

		jButtonRandomSubgroups.setPreferredSize(new Dimension(120, 25));
		jButtonRandomSubgroups.setBorder(new BevelBorder(0));
		jButtonRandomSubgroups.setMaximumSize(new Dimension(130, 25));
		jButtonRandomSubgroups.setFont(new Font("Dialog", 1, 11));
		jButtonRandomSubgroups.setText("Random Subgroups");
		jButtonRandomSubgroups.setMinimumSize(new Dimension(82, 25));
		jButtonRandomSubgroups.setMnemonic('R');
		jButtonRandomSubgroups.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jButtonRandomSubgroupsActionPerformed(evt);
			}
		});
		jPanelMineButtons.add(jButtonRandomSubgroups);

		jButtonRandomConditions.setPreferredSize(new Dimension(120, 25));
		jButtonRandomConditions.setBorder(new BevelBorder(0));
		jButtonRandomConditions.setMaximumSize(new Dimension(130, 25));
		jButtonRandomConditions.setFont(new Font("Dialog", 1, 11));
		jButtonRandomConditions.setText("Random Conditions");
		jButtonRandomConditions.setMinimumSize(new Dimension(82, 25));
		jButtonRandomConditions.setMnemonic('C');
		jButtonRandomConditions.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jButtonRandomConditionsActionPerformed(evt);
			}
		});
		jPanelMineButtons.add(jButtonRandomConditions);

		jPanelSouth.add(jPanelMineButtons);
		jPanelSouth.add(jPanelLayoutFiller2);
		jPanelSouth.add(jLabelLayoutFiller3);
		getContentPane().add(jPanelSouth, BorderLayout.SOUTH);

		// dataset =================================
		jPanelCenter.setLayout(new GridLayout(2, 2));

		jPanelRuleTarget.setLayout(new BoxLayout(jPanelRuleTarget, 0));
		jPanelRuleTarget.setBorder(new TitledBorder(new EtchedBorder(),
				"dataset", 4, 2, new Font("Dialog", 1, 11)));
		jPanelRuleTarget.setFont(new Font("Dialog", 1, 12));

		jPanelRuleTargetLabels.setLayout(new GridLayout(7, 1));

		jLabelTargetTable.setText(" target table");
		jLabelTargetTable.setFont(new Font("Dialog", 0, 10));
		jPanelRuleTargetLabels.add(jLabelTargetTable);

		jLabelTargetAttribute.setText(" target attribute");
		jLabelTargetAttribute.setFont(new Font("Dialog", 0, 10));
		jPanelRuleTargetLabels.add(jLabelTargetAttribute);

		jLabelNrExamples.setText(" # examples");
		jLabelNrExamples.setFont(new Font("Dialog", 0, 10));
		jPanelRuleTargetLabels.add(jLabelNrExamples);

		jLabelNrColumns.setText(" # columns");
		jLabelNrColumns.setFont(new Font("Dialog", 0, 10));
		jPanelRuleTargetLabels.add(jLabelNrColumns);

		jPanelRuleTarget.add(jPanelRuleTargetLabels);

		jPanelRuleTargetFields.setLayout(new GridLayout(7, 1));

		jLFieldTargetTable.setForeground(Color.black);
		jLFieldTargetTable.setFont(new Font("Dialog", 0, 10));
		jPanelRuleTargetFields.add(jLFieldTargetTable);

		jLFieldNrExamples.setForeground(Color.black);
		jLFieldNrExamples.setFont(new Font("Dialog", 0, 10));
		jPanelRuleTargetFields.add(jLFieldNrExamples);

		jLFieldNrColumns.setForeground(Color.black);
		jLFieldNrColumns.setFont(new Font("Dialog", 0, 10));
		jPanelRuleTargetFields.add(jLFieldNrColumns);

		jPanelRuleTarget.add(jPanelRuleTargetFields);
		jPanelCenter.add(jPanelRuleTarget);

		// target concept
		// ======================================================================
		jPanelRuleEvaluation.setLayout(new BoxLayout(jPanelRuleEvaluation, 0));
		jPanelRuleEvaluation.setBorder(new TitledBorder(new EtchedBorder(),
				"target concept", 4, 2, new Font("Dialog", 1, 11)));
		jPanelRuleEvaluation.setFont(new Font("Dialog", 1, 12));

		jPanelEvaluationLabels.setLayout(new GridLayout(8, 1));

		jComboBoxTargetType.setPreferredSize(new Dimension(86, 22));
		jComboBoxTargetType.setMinimumSize(new Dimension(86, 22));
		jComboBoxTargetType.setFont(new Font("Dialog", 0, 10));
		jComboBoxTargetType.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jComboBoxTargetTypeActionPerformed(evt);
			}
		});
		jPanelEvaluationFields.add(jComboBoxTargetType);

		jLabelTargetType.setText(" target type");
		jLabelTargetType.setFont(new Font("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelTargetType);

		jLabelQualityMeasure.setText(" quality measure");
		jLabelQualityMeasure.setFont(new Font("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelQualityMeasure);

		jLabelEvaluationTreshold.setText(" measure minimum");
		jLabelEvaluationTreshold.setFont(new Font("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelEvaluationTreshold);

		jLabelTargetAttribute.setText(" primary target");
		jLabelTargetAttribute.setFont(new Font("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelTargetAttribute);

		jLabelMiscField.setFont(new Font("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelMiscField);

		jLabelSecondaryTargets.setText(" secondary targets");
		jLabelSecondaryTargets.setFont(new Font("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelSecondaryTargets);

		jLabelTargetInfo.setFont(new Font("Dialog", 0, 10));
		jPanelEvaluationLabels.add(jLabelTargetInfo);
		jPanelRuleEvaluation.add(jPanelEvaluationLabels);

		// fields ================================
		jPanelEvaluationFields.setLayout(new GridLayout(8, 1));

		jComboBoxQualityMeasure.setPreferredSize(new Dimension(86, 22));
		jComboBoxQualityMeasure.setMinimumSize(new Dimension(86, 22));
		jComboBoxQualityMeasure.setFont(new Font("Dialog", 0, 10));
		jComboBoxQualityMeasure.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jComboBoxQualityMeasureActionPerformed(evt);
			}
		});
		jPanelEvaluationFields.add(jComboBoxQualityMeasure);

		jTextFieldQualityMeasureMinimum.setPreferredSize(new Dimension(86, 22));
		jTextFieldQualityMeasureMinimum.setFont(new Font("Dialog", 0, 10));
		jTextFieldQualityMeasureMinimum.setText("0");
		jTextFieldQualityMeasureMinimum.setHorizontalAlignment(SwingConstants.RIGHT);
		jTextFieldQualityMeasureMinimum.setMinimumSize(new Dimension(86, 22));
		jPanelEvaluationFields.add(jTextFieldQualityMeasureMinimum);

		jComboBoxTargetAttribute.setPreferredSize(new Dimension(86, 22));
		jComboBoxTargetAttribute.setMinimumSize(new Dimension(86, 22));
		jComboBoxTargetAttribute.setFont(new Font("Dialog", 0, 10));
		jComboBoxTargetAttribute.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jComboBoxTargetAttributeActionPerformed(evt);
			}
		});
		jPanelEvaluationFields.add(jComboBoxTargetAttribute);

		jComboBoxMiscField.setFont(new Font("Dialog", 0, 10));
		jComboBoxMiscField.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jComboBoxMiscFieldActionPerformed(evt);
			}
		});
		jPanelEvaluationFields.add(jComboBoxMiscField);

		jListSecondaryTargets.setPreferredSize(new Dimension(86, 30));
		jListSecondaryTargets.setMinimumSize(new Dimension(86, 22));
		jListSecondaryTargets.setFont(new Font("Dialog", 0, 10));
		jListSecondaryTargets.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent evt) {
				jListSecondaryTargetsActionPerformed(evt);
			}
		});
		jPanelEvaluationFields.add(jListSecondaryTargets);

		jLFieldTargetInfo.setForeground(Color.black);
		jLFieldTargetInfo.setFont(new Font("Dialog", 0, 10));
		jPanelEvaluationFields.add(jLFieldTargetInfo);

		jButtonBaseModel.setPreferredSize(new Dimension(86, 22));
		jButtonBaseModel.setBorder(new BevelBorder(0));
		jButtonBaseModel.setMaximumSize(new Dimension(95, 25));
		jButtonBaseModel.setFont(new Font("Dialog", 1, 11));
		jButtonBaseModel.setText("Base Model");
		jButtonBaseModel.setMinimumSize(new Dimension(82, 25));
		jButtonBaseModel.setMnemonic('M');
		jButtonBaseModel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jButtonBaseModelActionPerformed(evt);
			}
		});
		jPanelEvaluationFields.add(jButtonBaseModel);

		jPanelRuleEvaluation.add(jPanelEvaluationFields);
		jPanelCenter.add(jPanelRuleEvaluation);

		// search conditions
		// ===================================================================
		jPanelSearchParameters.setLayout(new BoxLayout(jPanelSearchParameters,
				0));
		jPanelSearchParameters.setBorder(new TitledBorder(new EtchedBorder(),
				"search conditions", 4, 2, new Font("Dialog", 1, 11)));
		jPanelSearchParameters.setFont(new Font("Dialog", 1, 12));

		jPanelSearchParameterLabels.setLayout(new GridLayout(7, 1));

		jLabelSearchDepth.setText(" refinement depth");
		jLabelSearchDepth.setFont(new Font("Dialog", 0, 10));
		jPanelSearchParameterLabels.add(jLabelSearchDepth);

		jLabelSearchCoverageMinimum.setText(" minimum coverage");
		jLabelSearchCoverageMinimum.setFont(new Font("Dialog", 0, 10));
		jPanelSearchParameterLabels.add(jLabelSearchCoverageMinimum);

		jLabelSearchCoverageMaximum.setText(" coverage fraction");
		jLabelSearchCoverageMaximum.setFont(new Font("Dialog", 0, 10));
		jPanelSearchParameterLabels.add(jLabelSearchCoverageMaximum);

		jLabelSubgroupsMaximum.setText(" maximum subgroups");
		jLabelSubgroupsMaximum.setFont(new Font("Dialog", 0, 10));
		jPanelSearchParameterLabels.add(jLabelSubgroupsMaximum);

		jLabelSearchTimeMaximum.setText(" maximum time (min)");
		jLabelSearchTimeMaximum.setFont(new Font("Dialog", 0, 10));
		jPanelSearchParameterLabels.add(jLabelSearchTimeMaximum);

		jPanelSearchParameters.add(jPanelSearchParameterLabels);

		jPanelSearchParameterFields.setLayout(new GridLayout(7, 1));

		jTextFieldSearchDepth.setPreferredSize(new Dimension(86, 22));
		jTextFieldSearchDepth.setFont(new Font("Dialog", 0, 10));
		jTextFieldSearchDepth.setText("0");
		jTextFieldSearchDepth.setHorizontalAlignment(SwingConstants.RIGHT);
		jTextFieldSearchDepth.setMinimumSize(new Dimension(86, 22));
		jPanelSearchParameterFields.add(jTextFieldSearchDepth);

		jTextFieldSearchCoverageMinimum.setPreferredSize(new Dimension(86, 22));
		jTextFieldSearchCoverageMinimum.setFont(new Font("Dialog", 0, 10));
		jTextFieldSearchCoverageMinimum.setText("0");
		jTextFieldSearchCoverageMinimum.setHorizontalAlignment(SwingConstants.RIGHT);
		jTextFieldSearchCoverageMinimum.setMinimumSize(new Dimension(86, 22));
		jPanelSearchParameterFields.add(jTextFieldSearchCoverageMinimum);

		jTextFieldSearchCoverageMaximum.setPreferredSize(new Dimension(86, 22));
		jTextFieldSearchCoverageMaximum.setFont(new Font("Dialog", 0, 10));
		jTextFieldSearchCoverageMaximum.setText("0");
		jTextFieldSearchCoverageMaximum.setHorizontalAlignment(SwingConstants.RIGHT);
		jTextFieldSearchCoverageMaximum.setMinimumSize(new Dimension(86, 22));
		jPanelSearchParameterFields.add(jTextFieldSearchCoverageMaximum);

		jTextFieldSubgroupsMaximum.setPreferredSize(new Dimension(86, 22));
		jTextFieldSubgroupsMaximum.setFont(new Font("Dialog", 0, 10));
		jTextFieldSubgroupsMaximum.setText("0");
		jTextFieldSubgroupsMaximum.setHorizontalAlignment(SwingConstants.RIGHT);
		jTextFieldSubgroupsMaximum.setMinimumSize(new Dimension(86, 22));
		jPanelSearchParameterFields.add(jTextFieldSubgroupsMaximum);

		jTextFieldSearchTimeMaximum.setPreferredSize(new Dimension(86, 22));
		jTextFieldSearchTimeMaximum.setFont(new Font("Dialog", 0, 10));
		jTextFieldSearchTimeMaximum.setText("0");
		jTextFieldSearchTimeMaximum.setHorizontalAlignment(SwingConstants.RIGHT);
		jTextFieldSearchTimeMaximum.setMinimumSize(new Dimension(86, 22));
		jPanelSearchParameterFields.add(jTextFieldSearchTimeMaximum);

		jPanelSearchParameters.add(jPanelSearchParameterFields);

		jPanelCenter.add(jPanelSearchParameters);

		jPanelSearchStrategy.setLayout(new BoxLayout(jPanelSearchStrategy, 0));
		jPanelSearchStrategy.setBorder(new TitledBorder(
			new EtchedBorder(), "search strategy", 4, 2, new Font("Dialog", 1, 11)));
		jPanelSearchStrategy.setFont(new Font("Dialog", 1, 12));

		jPanelSearchStrategyLabels.setLayout(new GridLayout(7, 1));

		jLabelStrategyType.setText(" strategy type");
		jLabelStrategyType.setFont(new Font("Dialog", 0, 10));
		jPanelSearchStrategyLabels.add(jLabelStrategyType);

		jLabelStrategyWidth.setText(" search width");
		jLabelStrategyWidth.setFont(new Font("Dialog", 0, 10));
		jPanelSearchStrategyLabels.add(jLabelStrategyWidth);

		jLabelSearchStrategyNumericFrr.setText(" best numeric");
		jLabelSearchStrategyNumericFrr.setFont(new Font("Dialog", 0, 10));
		jPanelSearchStrategyLabels.add(jLabelSearchStrategyNumericFrr);

		jPanelSearchStrategy.add(jPanelSearchStrategyLabels);

		jPanelSearchStrategyFields.setLayout(new GridLayout(7, 1));

		jComboBoxSearchStrategyType.setPreferredSize(new Dimension(86, 22));
		jComboBoxSearchStrategyType.setMinimumSize(new Dimension(86, 22));
		jComboBoxSearchStrategyType.setFont(new Font("Dialog", 0, 10));
		jComboBoxSearchStrategyType.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jComboBoxSearchStrategyTypeActionPerformed(evt);
			}
		});
		jPanelSearchStrategyFields.add(jComboBoxSearchStrategyType);

		jTextFieldSearchStrategyWidth.setPreferredSize(new Dimension(86, 22));
		jTextFieldSearchStrategyWidth.setFont(new Font("Dialog", 0, 10));
		jTextFieldSearchStrategyWidth.setText("0");
		jTextFieldSearchStrategyWidth.setHorizontalAlignment(SwingConstants.RIGHT);
		jTextFieldSearchStrategyWidth.setMinimumSize(new Dimension(86, 22));
		jPanelSearchStrategyFields.add(jTextFieldSearchStrategyWidth);

		jComboBoxNumeric.setPreferredSize(new Dimension(86, 22));
		jComboBoxNumeric.setMinimumSize(new Dimension(86, 22));
		jComboBoxNumeric.setFont(new Font("Dialog", 0, 10));
		jPanelSearchStrategyFields.add(jComboBoxNumeric);

		jPanelSearchStrategy.add(jPanelSearchStrategyFields);

		jPanelCenter.add(jPanelSearchStrategy);

		getContentPane().add(jPanelCenter, BorderLayout.CENTER);

		jPanelWest.setPreferredSize(new Dimension(5, 10));
		jPanelWest.setMinimumSize(new Dimension(5, 10));

		getContentPane().add(jPanelWest, BorderLayout.WEST);

		jPanelEast.setPreferredSize(new Dimension(5, 10));
		jPanelEast.setMinimumSize(new Dimension(5, 10));

		getContentPane().add(jPanelEast, BorderLayout.EAST);

		jPanelNorth.setPreferredSize(new Dimension(10, 5));
		jPanelNorth.setMinimumSize(new Dimension(10, 5));

		getContentPane().add(jPanelNorth, BorderLayout.NORTH);

		setJMenuBar(jMiningWindowMenuBar);
	}

	private void enableTableDependentComponents(boolean theSetting)
	{
		List<? extends AbstractButton> dataModelDependentComponents =
			new ArrayList<AbstractButton>(Arrays.asList(new AbstractButton[]
														{
															jMenuItemDataExplorer,
															jMenuItemBrowseTarget,
															jMenuItemSubgroupDiscovery,
															jButtonDataExplorer,
															jButtonBrowse,
															jButtonSubgroupDiscovery,
															jButtonRandomSubgroups,
															jButtonRandomConditions,
															jButtonBaseModel
														}));

		for(AbstractButton a : dataModelDependentComponents)
			a.setEnabled(theSetting);
	}

	private void jMenuItemOpenFileActionPerformed(ActionEvent evt)
	{
		new FileHandler(Action.OPEN_FILE);
		itsTable = FileHandler.itsTable;
		initGuiComponents();
	}

	// TODO remove "best first"
	private void jComboBoxSearchStrategyTypeActionPerformed(ActionEvent evt)
	{
		String aName = getSearchStrategyName();
		if(aName != null)
		{
			itsSearchParameters.setSearchStrategy(aName);
			jTextFieldSearchStrategyWidth.setEnabled(aName.equalsIgnoreCase("best first"));
		}
	}

	private void jComboBoxQualityMeasureActionPerformed(ActionEvent evt)
	{
		itsSearchParameters.setQualityMeasureMinimum(getQualityMeasureMinimum());
		initEvaluationMinimum();
	}

	private void jMenuItemAboutSubDiscActionPerformed(ActionEvent evt)
	{
		// TODO
		JOptionPane.showMessageDialog(null, "Subgroup Discovery",
				"About SubDisc", JOptionPane.INFORMATION_MESSAGE);
	}

	private void jMenuItemExitActionPerformed(ActionEvent evt)
	{
		Log.logCommandLine("exit");
		dispose();
		System.exit(0);
	}

	private void jComboBoxTargetAttributeActionPerformed(ActionEvent evt)
	{
		itsTargetConcept.setPrimaryTarget(itsTable.getAttribute(getTargetAttributeName()));
		itsSearchParameters.setTargetConcept(itsTargetConcept);

		TargetType aTargetType = itsTargetConcept.getTargetType();

		if(getTargetAttributeName() != null &&
			(aTargetType == TargetType.SINGLE_NOMINAL ||
				aTargetType == TargetType.MULTI_BINARY_CLASSIFICATION))
		{
			Log.logCommandLine("init");
			initTargetValueItems();
		}

		// TODO these test could be member functions in TargetType?
		// has MiscField?
		boolean hasMiscField = (aTargetType == TargetType.SINGLE_NOMINAL ||
								aTargetType == TargetType.DOUBLE_REGRESSION ||
								aTargetType == TargetType.DOUBLE_CORRELATION ||
								aTargetType == TargetType.MULTI_BINARY_CLASSIFICATION);
		jComboBoxMiscField.setVisible(hasMiscField);
		jLabelMiscField.setVisible(hasMiscField);

		if(aTargetType == TargetType.SINGLE_NOMINAL ||
			aTargetType == TargetType.MULTI_BINARY_CLASSIFICATION)
			jLabelMiscField.setText(" target value");
		else
			jLabelMiscField.setText(" secondary target");

		// has secondary targets (JList)
		boolean hasSecondaryTargets = (aTargetType == TargetType.MULTI_LABEL ||
										aTargetType == TargetType.MULTI_BINARY_CLASSIFICATION);
		jLabelSecondaryTargets.setVisible(hasSecondaryTargets);
		jListSecondaryTargets.setVisible(hasSecondaryTargets);
		SecondaryTargets.setVisible(hasSecondaryTargets);

		// has target attribute?
		boolean hasTargetAttribute = (aTargetType != TargetType.MULTI_LABEL);
		jLabelTargetAttribute.setVisible(hasTargetAttribute);
		jComboBoxTargetAttribute.setVisible(hasTargetAttribute);

		// has base model?
		boolean hasBaseModel = (aTargetType == TargetType.DOUBLE_CORRELATION ||
								aTargetType == TargetType.DOUBLE_REGRESSION ||
								aTargetType == TargetType.MULTI_LABEL);
		jButtonBaseModel.setEnabled(hasBaseModel);
	}

	private void jComboBoxTargetTypeActionPerformed(ActionEvent evt)
	{
		itsTargetConcept.setTargetType(getTargetTypeName());
		itsSearchParameters.setTargetConcept(itsTargetConcept);

		initQualityMeasure();
		initTargetAttributeItems();
	}

	private void jComboBoxMiscFieldActionPerformed(ActionEvent evt)
	{
		switch(itsTargetConcept.getTargetType())
		{
			case SINGLE_NOMINAL :
			case MULTI_BINARY_CLASSIFICATION :
			{
					itsTargetConcept.setTargetValue(getMiscFieldName());
					break;
			}
			case DOUBLE_REGRESSION :
			case DOUBLE_CORRELATION :
			{
				itsTargetConcept.setSecondaryTarget(itsTable.getAttribute(getTargetAttributeName()));
				break;
			}
			default : break;
		}
		itsSearchParameters.setTargetConcept(itsTargetConcept);

		if(getMiscFieldName() != null)
			initTargetInfo();
	}

	private void jListSecondaryTargetsActionPerformed(ListSelectionEvent evt)
	{
		initTargetInfo();
	}

	private void jButtonBaseModelActionPerformed(ActionEvent evt)
	{
		try
		{
			setupSearchParameters();

			ModelWindow aWindow;
			switch(itsTargetConcept.getTargetType())
			{
				case DOUBLE_REGRESSION :
				{
					Attribute aPrimaryTarget = itsTargetConcept.getPrimaryTarget();
					Column aPrimaryColumn = itsTable.getColumn(aPrimaryTarget);
					Attribute aSecondaryTarget = itsTargetConcept.getSecondaryTarget();
					Column aSecondaryColumn = itsTable.getColumn(aSecondaryTarget);
					RegressionMeasure anRM = new RegressionMeasure(itsSearchParameters.getQualityMeasure(),
						aPrimaryColumn, aSecondaryColumn, null);

					aWindow = new ModelWindow(aPrimaryColumn, aSecondaryColumn,
							aPrimaryTarget.getName(), aSecondaryTarget.getName(), anRM);
					aWindow.setLocation(50, 50);
					aWindow.setSize(700, 700);
					aWindow.setVisible(true);
					aWindow.setTitle("Base Model");
					break;
				}
				case DOUBLE_CORRELATION :
				{
					Attribute aPrimaryTarget = itsTargetConcept.getPrimaryTarget();
					Column aPrimaryColumn = itsTable.getColumn(aPrimaryTarget);
					Attribute aSecondaryTarget = itsTargetConcept.getSecondaryTarget();
					Column aSecondaryColumn = itsTable.getColumn(aSecondaryTarget);

					aWindow = new ModelWindow(aPrimaryColumn, aSecondaryColumn,
							aPrimaryTarget.getName(), aSecondaryTarget.getName(), null); //no trendline
					aWindow.setLocation(50, 50);
					aWindow.setSize(700, 700);
					aWindow.setVisible(true);
					aWindow.setTitle("Base Model");
					break;
				}
				case MULTI_LABEL :
				{
					// compute selected targets
					BitSet aSelectedColumns = new BitSet();
					int[] aSelection = jListSecondaryTargets.getSelectedIndices();
					for(int anIndex : aSelection)
						aSelectedColumns.set(itsTable.getBinaryIndex(anIndex));
					String[] aNames = new String[aSelectedColumns.cardinality()];
					for(int anIndex : aSelection)
						aNames[anIndex] = itsTable.getAttribute(itsTable.getBinaryIndex(anIndex)).getName();

					// compute base model
					Bayesian aBayesian =
						new Bayesian(new BinaryTable(itsTable, aSelectedColumns), aNames);
					aBayesian.climb();
					DAG aBaseDAG = aBayesian.getDAG();
					aBaseDAG.print();

					aWindow = new ModelWindow(aBaseDAG, 1200, 900);
					aWindow.setLocation(0, 0);
					aWindow.setSize(1200, 900);
					aWindow.setVisible(true);
					aWindow.setTitle("Base Model: Bayesian Network");
					break;
				}
				default: return; // TODO other types not implemented yet
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	private void BrowseActionPerformed(ActionEvent evt)
	{
		new TableWindow(itsTable);
		//tw.setVisible(true);
	}

	private void DataExplorerActionPerformed(ActionEvent evt)
	{
		// TODO
		// DataExplorerWindow aDataExplorerWindow = new
		// DataExplorerWindow(itsDataModel);
		// aDataExplorerWindow.setLocation(30, 150);
		// aDataExplorerWindow.setTitle("Explore data model: " +
		// itsDataModel.getName());
		// aDataExplorerWindow.setVisible(true);
	}

	private void jButtonSubgroupDiscoveryActionPerformed(ActionEvent evt)
	{
		try
		{
			setupSearchParameters();

			//TODO other types not implemented yet
			if(!itsTargetConcept.getTargetType().isImplemented())
				return;

			echoMiningStart();
			long aBegin = System.currentTimeMillis();

			SubgroupDiscovery aSubgroupDiscovery;
			switch(itsTargetConcept.getTargetType())
			{
				case SINGLE_NOMINAL :
				{
					aSubgroupDiscovery = new SubgroupDiscovery(itsSearchParameters, itsTable, itsPositiveCount);
					break;
				}
				case MULTI_LABEL :
				{
					BitSet aSelectedColumns = new BitSet();
					int[] aSelection = jListSecondaryTargets.getSelectedIndices();
					for(int anIndex : aSelection)
						aSelectedColumns.set(itsTable.getBinaryIndex(anIndex));
					aSubgroupDiscovery = new SubgroupDiscovery(itsSearchParameters, itsTable, aSelectedColumns);
					break;
				}
				case DOUBLE_REGRESSION :
				{
					aSubgroupDiscovery = new SubgroupDiscovery(itsSearchParameters, itsTable, true);
					break;
				}
				case DOUBLE_CORRELATION :
				{
					aSubgroupDiscovery = new SubgroupDiscovery(itsSearchParameters, itsTable, false);
					break;
				}
				default : return; // TODO should never get here, throw warning
			}
			aSubgroupDiscovery.Mine(System.currentTimeMillis());

			//ResultWindow
			SubgroupSet aPreliminaryResults = aSubgroupDiscovery.getResult();
//			aPreliminaryResults.print();
			ResultWindow aResultWindow = new ResultWindow(aPreliminaryResults, itsSearchParameters, null);
			aResultWindow.setLocation(0, 0);
			aResultWindow.setSize(1200, 900);
			aResultWindow.setVisible(true);

			long anEnd = System.currentTimeMillis();
			if(anEnd > aBegin + (long)(itsSearchParameters.getMaximumTime()*60*1000))
				JOptionPane.showMessageDialog(null, "Mining process ended prematurely due to time limit.",
											  "Time Limit", JOptionPane.INFORMATION_MESSAGE);

		}
		catch (Exception e)
		{
			e.printStackTrace();
			ErrorWindow aWindow = new ErrorWindow(e);
			aWindow.setLocation(200, 200);
			aWindow.setVisible(true);
		}
	}

	private void jButtonRandomSubgroupsActionPerformed(ActionEvent evt)
	{
		try
		{
			setupSearchParameters();

			QualityMeasure aQualityMeasure =
				new QualityMeasure(itsSearchParameters.getQualityMeasure(), itsTable.getNrRows(), itsPositiveCount);

			Attribute aTarget = itsSearchParameters.getTargetConcept().getPrimaryTarget();
			Condition aCondition = new Condition(aTarget, Condition.EQUALS);
			aCondition.setValue(itsSearchParameters.getTargetConcept().getTargetValue());
			BitSet aBinaryTarget = itsTable.evaluate(aCondition);

			for(int i = 0; i < 100; i++)
			{
				Subgroup aSubgroup = itsTable.getRandomSubgroup(300); // TODO
				BitSet aColumnTarget = (BitSet) aBinaryTarget.clone();
				aColumnTarget.and(aSubgroup.getMembers());
				int aCountHeadBody = aColumnTarget.cardinality();
				double aQuality = aQualityMeasure.calculate(aCountHeadBody, aSubgroup.getCoverage());
				Log.logCommandLine((i + 1) + "," + aSubgroup.getCoverage() + "," + aQuality);
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
			ErrorWindow aWindow = new ErrorWindow(e);
			aWindow.setLocation(200, 200);
			aWindow.setVisible(true);
		}
	}

	private void jButtonRandomConditionsActionPerformed(ActionEvent evt)
	{
		setupSearchParameters();

		// get targets
		BitSet aSelectedColumns = new BitSet();
		int[] aSelection = jListSecondaryTargets.getSelectedIndices();
		for(int anIndex : aSelection)
			aSelectedColumns.set(itsTable.getBinaryIndex(anIndex));

		// base model
		BinaryTable aBaseTable = new BinaryTable(itsTable, aSelectedColumns);
		Bayesian aBayesian = new Bayesian(aBaseTable);
		aBayesian.climb();
		QualityMeasure aQualityMeasure =
			new QualityMeasure(aBayesian.getDAG(), itsTable.getNrRows(), 0.5f, 1f);

		Random aRandom = new Random(System.currentTimeMillis());
		int aSize = 100;
		float aTotalQuality = 0.0f;
		for(int i = 0; i < aSize; i++) // random conditions
		{
			ConditionList aCL;
			BitSet aMembers;
			do
			{
				aCL = new ConditionList();
				for(int j = 0; j < itsSearchParameters.getSearchDepth(); j++) // j conditions
				{
					Attribute anAttribute;
					do
					{
						anAttribute = itsTable.getAttribute(aRandom.nextInt(itsTable.getNrColumns()));
					} while (!anAttribute.isNumericType());
					int anOperator = aRandom.nextBoolean() ?
							Condition.LESS_THAN_OR_EQUAL : Condition.GREATER_THAN_OR_EQUAL;
					Condition aCondition = new Condition(anAttribute, anOperator);
					float aMin = itsTable.getColumn(anAttribute).getMin();
					float aMax = itsTable.getColumn(anAttribute).getMax();
					aCondition.setValue(
						Float.toString(aMin + (aMax - aMin) / 4 + (aMax - aMin) * aRandom.nextFloat() / 2));
					aCL.addCondition(aCondition);
				}
				aMembers = itsTable.evaluate(aCL);
			} while (aMembers.cardinality() < itsSearchParameters.getMinimumCoverage());
			// Log.logCommandLine(aCL.toString());
			Subgroup aSubgroup = new Subgroup(aCL, aMembers, aCL.size());

			// build model
			BinaryTable aBinaryTable = aBaseTable.selectRows(aMembers);
			aBayesian = new Bayesian(aBinaryTable);
			aBayesian.climb();
			DAG aDAG = aBayesian.getDAG();
			aSubgroup.setDAG(aDAG); // store DAG with subgroup for later use

			double aQuality = aQualityMeasure.calculateEDIT_DISTANCE(aSubgroup);
			aTotalQuality += aQuality;
			Log.logCommandLine("" + (i + 1) + "," + aSubgroup.getCoverage()
					+ "," + aQuality);
		}
		Log.logCommandLine("average quality " + aTotalQuality / aSize);
	}

	private void setupSearchParameters()
	{
		initSearchParameters(itsSearchParameters);
		itsTargetConcept.setTargetType(getTargetTypeName());	// TODO can be removed, set already
		initTargetConcept(itsTargetConcept);
		itsSearchParameters.setTargetConcept(itsTargetConcept);	// TODO can be removed, set already
	}

	/** Exit the Application */
	private void exitForm(WindowEvent evt)
	{
		dispose();
		System.exit(0);
	}

	// TODO can do without theSearchParameters, there is only itsSearchParameters
	private void initSearchParameters(SearchParameters theSearchParameters)
	{
		// theSearchParameters.setTarget(itsTable.getAttribute(getTargetAttributeName()));
		// theSearchParameters.setTargetAttributeShort(getTargetAttributeName());
		// theSearchParameters.setTargetValue(getMiscFieldName()); //only makes
		// sense for certain target concepts

		theSearchParameters.setQualityMeasure(getQualityMeasureName());
		theSearchParameters.setQualityMeasureMinimum(getQualityMeasureMinimum().floatValue());

		theSearchParameters.setSearchDepth(getSearchDepthMaximum().intValue());
		theSearchParameters.setMinimumCoverage(getSearchCoverageMinimum().intValue());
		theSearchParameters.setMaximumCoverage(getSearchCoverageMaximum().floatValue());
		theSearchParameters.setMaximumSubgroups(getSubgroupsMaximum().intValue());
		theSearchParameters.setMaximumTime(getSearchTimeMaximum().floatValue());

		theSearchParameters.setSearchStrategy(getSearchStrategyName());
		theSearchParameters.setSearchStrategyWidth(getSearchStrategyWidth().intValue());
		theSearchParameters.setNumericStrategy(getNumericStrategy());
		theSearchParameters.setNrSplitPoints(7);

		theSearchParameters.setPostProcessingCount(20);
		theSearchParameters.setMaximumPostProcessingSubgroups(100);

		// bayesian stuff
		theSearchParameters.setAlpha(0.5f);
		theSearchParameters.setBeta(1f);
	}

	// Obsolete, this info is already up to date through *ActionPerformed methods
	// TODO could call itsTargetConcept directly, no need for parameter
	private void initTargetConcept(TargetConcept theTC)
	{
		Attribute aTarget = itsTable.getAttribute(getTargetAttributeName());
		theTC.setPrimaryTarget(aTarget);

		// target value
		switch(theTC.getTargetType())
		{
			case SINGLE_NOMINAL					:
			case MULTI_BINARY_CLASSIFICATION	: theTC.setTargetValue(getMiscFieldName()); break;
			case DOUBLE_CORRELATION				:
			case DOUBLE_REGRESSION				: theTC.setSecondaryTarget(itsTable.getAttribute(getMiscFieldName())); break;
			default								: break;
		}
		// TODO add more details of target concept from GUI
	}

	public void echoMiningStart()
	{
		Log.logCommandLine("Mining process started");
	}

	public void echoMiningEnd(long theMilliSeconds, int theNumberOfSubgroups)
	{
		int seconds = Math.round(theMilliSeconds / 1000);
		int minutes = Math.round(theMilliSeconds / 60000);
		int secondsRemainder = seconds - (minutes * 60);
		String aString = new String("Mining process finished in " + minutes
				+ " minutes and " + secondsRemainder + " seconds.\n");

		if(theNumberOfSubgroups == 0)
			aString += "   No subgroups found that match the search criterion.\n";
		else if(theNumberOfSubgroups == 1)
			aString += "   1 subgroup found.\n";
		else
			aString += "   " + theNumberOfSubgroups + " subgroups found.\n";
		Log.logCommandLine(aString);
	}

	/* INITIALIZATION METHODS OF Window COMPONENTS */

	private void initTargetAttributeItems()
	{
		TargetType aTargetType = itsTargetConcept.getTargetType();

		// clear all
		removeAllTargetAttributeItems();
		if((aTargetType == TargetType.DOUBLE_REGRESSION)
				|| (aTargetType == TargetType.DOUBLE_CORRELATION))
			removeAllMiscFieldItems();

		// primary target and MiscField
		boolean isEmpty = true;
		for(int i = 0; i < itsTable.getNrColumns(); i++) {
			Attribute anAttribute = itsTable.getAttribute(i);
			if((aTargetType == TargetType.SINGLE_NOMINAL && anAttribute.isNominalType()) ||
					(aTargetType == TargetType.SINGLE_NOMINAL && anAttribute.isBinaryType()) ||
					(aTargetType == TargetType.SINGLE_NUMERIC && anAttribute.isNumericType()) ||
					(aTargetType == TargetType.SINGLE_ORDINAL && anAttribute.isNumericType()) ||
					(aTargetType == TargetType.DOUBLE_REGRESSION && anAttribute.isNumericType()) ||
					(aTargetType == TargetType.DOUBLE_CORRELATION && anAttribute.isNumericType()) ||
					(aTargetType == TargetType.MULTI_LABEL && anAttribute.isNumericType()) ||
					(aTargetType == TargetType.MULTI_BINARY_CLASSIFICATION && anAttribute.isBinaryType()) ||
					(aTargetType == TargetType.MULTI_BINARY_CLASSIFICATION && anAttribute.isNominalType()))
			{
				addTargetAttributeItem(itsTable.getAttribute(i).getName());
				if((aTargetType == TargetType.DOUBLE_REGRESSION) ||
						(aTargetType == TargetType.DOUBLE_CORRELATION))
					addMiscFieldItem(itsTable.getAttribute(i).getName());

				isEmpty = false;
			}
		}
		if(aTargetType == TargetType.SINGLE_NOMINAL && isEmpty) // no target attribute selected
			removeAllMiscFieldItems();

		// secondary targets =======================================
		if(aTargetType == TargetType.MULTI_LABEL && jListSecondaryTargets.getSelectedIndices().length == 0)
		{
			int aCount = 0;
			for(int i = 0; i < itsTable.getNrColumns(); i++)
			{
				Attribute anAttribute = itsTable.getAttribute(i);
				if(anAttribute.isBinaryType())
				{
					addSecondaryTargetsItem(itsTable.getAttribute(i).getName());
					aCount++;
				}
			}
			jListSecondaryTargets.setSelectionInterval(0, aCount - 1);
		}
	}

	private void initTargetValueItems()
	{
		removeAllMiscFieldItems();
		if(jComboBoxTargetAttribute.getItemCount() == 0) // no attributes for selected target concept type?
			return;

		// single target attribute
		// if(!TargetConcept.isEMM(getTargetTypeName()))
		// {
		Attribute aTarget = itsTable.getAttribute(getTargetAttributeName());
		TreeSet<String> aValues = itsTable.getDomain(aTarget.getIndex());
		for(String aValue : aValues)
			addMiscFieldItem(aValue);
		// }
	}

	private void initTargetInfo()
	{
		switch(itsTargetConcept.getTargetType())
		{
			case SINGLE_NOMINAL :
			{
				Attribute aTarget = itsTable.getAttribute(getTargetAttributeName());
				String aSelectedTargetValue = getMiscFieldName();
				itsPositiveCount = itsTable.countValues(aTarget.getIndex(), aSelectedTargetValue);
				float aPercentage = ((float) itsPositiveCount * 100f) / (float) itsTotalCount;
				NumberFormat aFormatter = NumberFormat.getNumberInstance();
				aFormatter.setMaximumFractionDigits(1);
				jLFieldTargetInfo.setText(itsPositiveCount + " (" + aFormatter.format(aPercentage) + " %)");
				jLabelTargetInfo.setText(" # positive");
				break;
			}
			case SINGLE_NUMERIC :
			{
				Attribute aTarget = itsTable.getAttribute(getTargetAttributeName());
				itsTargetAverage = itsTable.getAverage(aTarget.getIndex());
				jLabelTargetInfo.setText(" average");
				jLFieldTargetInfo.setText("" + itsTargetAverage);
				break;
			}
			case SINGLE_ORDINAL :
			case DOUBLE_REGRESSION :
			case DOUBLE_CORRELATION :
			{
				initTargetConcept(itsTargetConcept);
				Column aPrimaryColumn = itsTable.getColumn(itsTargetConcept.getPrimaryTarget());
				Column aSecondaryColumn = itsTable.getColumn(itsTargetConcept.getSecondaryTarget());
				CorrelationMeasure aCM =
					new CorrelationMeasure(QualityMeasure.CORRELATION_R, aPrimaryColumn, aSecondaryColumn);
				jLabelTargetInfo.setText(" correlation");
				jLFieldTargetInfo.setText(Double.toString(aCM.getEvaluationMeasureValue()));
				break;
			}
			case MULTI_LABEL :
			{
				int[] aSelection = jListSecondaryTargets.getSelectedIndices();
				jLFieldTargetInfo.setText("" + aSelection.length);
				jLabelTargetInfo.setText(" binary targets");
				break;
			}
			case MULTI_BINARY_CLASSIFICATION :
			{
				jLabelTargetInfo.setText(" target info");
				jLFieldTargetInfo.setText("none");
				break;
			}
		}

		setSearchCoverageMinimum(Integer.toString(itsTotalCount / 10));
	}

	// TODO this is always the same so why remove and add
	private void initTargetType()
	{
		removeAllTargetTypeItems();
		for(TargetType t : TargetType.values())
			if(t.isImplemented())
				addTargetTypeItem(t.text);
		itsTargetConcept.setTargetType(getTargetTypeName());	// could use SINGLE_NOMINAL as default in TargetConcept
//		jComboBoxTargetTypeActionPerformed(null);	// extreme hack to re-populate list, ActionListeners may respond to quickly
	}

	private void initQualityMeasure()
	{
		removeAllQualityMeasureItems();
		TargetType aTargetType = itsTargetConcept.getTargetType();

		for(int i = QualityMeasure.getFirstEvaluationMesure(aTargetType); i <= QualityMeasure.getLastEvaluationMesure(aTargetType); i++)
			addQualityMeasureItem(QualityMeasure.getMeasureString(i));
		initEvaluationMinimum();
	}

	private void initEvaluationMinimum()
	{
		if(getQualityMeasureName() != null)
			setQualityMeasureMinimumName(QualityMeasure.getMeasureMinimum(getQualityMeasureName(), itsTargetAverage));
	}

	private void initSearchStrategyItems()
	{
		removeAllSearchStrategyItems();
		for(int i = 0; i <= CandidateQueue.LAST_SEARCH_STRATEGY; i++)
			addSearchStrategyItem(SearchParameters.getSearchStrategyName(i));
	}

	private void initNumericStrategy()
	{
		removeAllNumericStrategyItems();
		for(NumericStrategy n : SearchParameters.NumericStrategy.values())
			addNumericStrategyItem(n.text);
	}

	/* FIELD METHODS OF SUBDISC COMPONENTS */
	private void removeAllTargetAttributeItems() { jComboBoxTargetAttribute.removeAllItems(); }
	private void addTargetAttributeItem(String anItem) { jComboBoxTargetAttribute.addItem(anItem); }
	private void removeAllSecondaryTargetsItems() { jListSecondaryTargets.removeAll(); }
	private void addSecondaryTargetsItem(String theItem)
	{
		DefaultListModel aModel = (DefaultListModel) (jListSecondaryTargets.getModel());
		int anEnd = aModel.getSize();
		aModel.add(anEnd, theItem);
	}
	private String getTargetAttributeName() { return (String) jComboBoxTargetAttribute.getSelectedItem(); }
	private void removeAllMiscFieldItems() { jComboBoxMiscField.removeAllItems(); }
	private void addMiscFieldItem(String anItem) { jComboBoxMiscField.addItem(anItem); }
	private String getMiscFieldName() { return (String) jComboBoxMiscField.getSelectedItem(); }
	private void removeAllQualityMeasureItems()
	{
		if(jComboBoxQualityMeasure.getItemCount() > 0)
			jComboBoxQualityMeasure.removeAllItems();
	}
	private void addQualityMeasureItem(String anItem) { jComboBoxQualityMeasure.addItem(anItem); }
	private String getQualityMeasureName() { return (String) jComboBoxQualityMeasure.getSelectedItem(); }
	private void removeAllTargetTypeItems() { if(jComboBoxTargetType.getItemCount() > 0 ) jComboBoxTargetType.removeAllItems(); }	// TODO MM
	/*private void removeAllTargetTypeItems()
	{
		if(jComboBoxTargetType.getItemCount() > 0)
			for(int i = 0, j = jComboBoxTargetType.getItemCount(); i < j; ++i)
				jComboBoxTargetType.removeItemAt(i);
	}	// TODO removeAllItems() does not work
	*/
	private void addTargetTypeItem(String anItem) { jComboBoxTargetType.addItem(anItem); }
	private String getTargetTypeName() { return (String) jComboBoxTargetType.getSelectedItem(); }
	private void setQualityMeasureMinimumName(String aValue) { jTextFieldQualityMeasureMinimum.setText(aValue); }
	private Float getQualityMeasureMinimum()
	{
		float aMinimum;
		try {
			aMinimum = Float.parseFloat(jTextFieldQualityMeasureMinimum.getText().trim());
		} catch (Exception ex) {
			return null;
		}
		return new Float(aMinimum);
	}
	private void setSearchDepthMaximum(String aValue) { jTextFieldSearchDepth.setText(aValue); }
	private Integer getSearchDepthMaximum() {
		int aMaximum;
		try {
			aMaximum = Integer.parseInt(jTextFieldSearchDepth.getText().trim());
		} catch (Exception ex) {
			return null;
		}
		return new Integer(aMaximum);
	}
	private void setSearchCoverageMinimum(String aValue) { jTextFieldSearchCoverageMinimum.setText(aValue); }
	private void setSearchCoverageMaximum(String aValue) { jTextFieldSearchCoverageMaximum.setText(aValue); }
	private void setSubgroupsMaximum(String aValue) { jTextFieldSubgroupsMaximum.setText(aValue); }
	private void setSearchTimeMaximum(String aValue) { jTextFieldSearchTimeMaximum.setText(aValue); }
	private Integer getSearchCoverageMinimum()
	{
		int aMinimum;
		try {
			aMinimum = Integer.parseInt(jTextFieldSearchCoverageMinimum
					.getText().trim());
		} catch (Exception ex) {
			return null;
		}
		return new Integer(aMinimum);
	}
	private Float getSearchCoverageMaximum() {
		float aMaximum;
		try {
			aMaximum = Float.parseFloat(jTextFieldSearchCoverageMaximum
					.getText().trim());
		} catch (Exception ex) {
			return null;
		}
		return new Float(aMaximum);
	}
	private Integer getSubgroupsMaximum() {
		int aMaximum;
		try {
			aMaximum = Integer.parseInt(jTextFieldSubgroupsMaximum.getText()
					.trim());
		} catch (Exception ex) {
			return null;
		}
		return new Integer(aMaximum);
	}
	private Float getSearchTimeMaximum() {
		float aMaximum;
		try {
			aMaximum = Float.parseFloat(jTextFieldSearchTimeMaximum.getText()
					.trim());
		} catch (Exception ex) {
			return null;
		}
		return new Float(aMaximum);
	}

	// search strategy
	private void removeAllSearchStrategyItems() { jComboBoxSearchStrategyType.removeAllItems(); }
	private void addSearchStrategyItem(String anItem) { jComboBoxSearchStrategyType.addItem(anItem); }
	private String getSearchStrategyName() { return (String) jComboBoxSearchStrategyType.getSelectedItem(); }

	// search width
	private void setSearchStrategyWidth(String aValue) { jTextFieldSearchStrategyWidth.setText(aValue); }
	private Integer getSearchStrategyWidth()
	{
		int aWidth;
		try {
			aWidth = Integer.parseInt(jTextFieldSearchStrategyWidth.getText()
					.trim());
		} catch (Exception ex) {
			return null;
		}
		return new Integer(aWidth);
	}

	// numeric strategy
	private String getNumericStrategy() { return (String) jComboBoxNumeric.getSelectedItem(); }
	private void removeAllNumericStrategyItems() { jComboBoxNumeric.removeAllItems(); }
	private void addNumericStrategyItem(String anItem) { jComboBoxNumeric.addItem(anItem); }

	private JMenuBar jMiningWindowMenuBar;
	private JMenu jMenuFile;
	private JMenuItem jMenuItemOpenFile;
	// private JMenuItem jMenuItemShowDataModel;
	private JMenuItem jMenuItemDataExplorer;
	private JMenuItem jMenuItemBrowseTarget;
	private JSeparator jSeparator2;
	private JMenuItem jMenuItemSubgroupDiscovery;
	private JSeparator jSeparator3;
	private JMenuItem jMenuItemExit;
	private JMenu jMenuAbout;
	private JMenuItem jMenuItemAboutSubDisc;
	private JPanel jPanelSouth;
	private JLabel jLabelLayoutFiller0;
	private JPanel jPanelLayoutFiller1;
	private JPanel jPanelMineButtons;
	// private JButton jButtonDataModel;
	private JButton jButtonDataExplorer;
	private JButton jButtonBrowse;
	private JButton jButtonSubgroupDiscovery;
	private JButton jButtonRandomSubgroups;
	private JButton jButtonRandomConditions;
	private JPanel jPanelLayoutFiller2;
	private JLabel jLabelLayoutFiller3;
	private JPanel jPanelCenter;
	private JPanel jPanelRuleTarget;
	private JPanel jPanelRuleTargetLabels;
	private JLabel jLabelTargetTable;
	private JLabel jLabelTargetAttribute;
	private JLabel jLabelMiscField;
	private JLabel jLabelSecondaryTargets;
	private JLabel jLabelNrExamples;
	private JLabel jLabelNrColumns;
	private JLabel jLabelTargetInfo;
	private JPanel jPanelRuleTargetFields;
	private JLabel jLFieldTargetTable;
	private JComboBox jComboBoxTargetAttribute;
	private JComboBox jComboBoxMiscField;
	private JList jListSecondaryTargets;
	private JScrollPane SecondaryTargets;
	private JLabel jLFieldNrExamples;
	private JLabel jLFieldNrColumns;
	private JLabel jLFieldTargetInfo;
	private JButton jButtonBaseModel;
	private JPanel jPanelRuleEvaluation;
	private JPanel jPanelEvaluationLabels;
	private JLabel jLabelTargetType;
	private JLabel jLabelQualityMeasure;
	private JLabel jLabelEvaluationTreshold;
	private JPanel jPanelEvaluationFields;
	private JComboBox jComboBoxQualityMeasure;
	private JComboBox jComboBoxTargetType;
	private JTextField jTextFieldQualityMeasureMinimum;
	private JPanel jPanelSearchParameters;
	private JPanel jPanelSearchParameterLabels;
	private JLabel jLabelSearchDepth;
	private JLabel jLabelSearchCoverageMinimum;
	private JLabel jLabelSearchCoverageMaximum;
	private JLabel jLabelSubgroupsMaximum;
	private JLabel jLabelSearchTimeMaximum;
	private JPanel jPanelSearchParameterFields;
	private JTextField jTextFieldSearchDepth;
	private JTextField jTextFieldSearchCoverageMinimum;
	private JTextField jTextFieldSearchCoverageMaximum;
	private JTextField jTextFieldSubgroupsMaximum;
	private JTextField jTextFieldSearchTimeMaximum;
	private JPanel jPanelSearchStrategy;
	private JPanel jPanelSearchStrategyLabels;
	private JLabel jLabelStrategyType;
	private JLabel jLabelStrategyWidth;
	private JLabel jLabelSearchStrategyNumericFrr;
	private JPanel jPanelSearchStrategyFields;
	private JComboBox jComboBoxSearchStrategyType;
	private JTextField jTextFieldSearchStrategyWidth;
	private JComboBox jComboBoxNumeric;
	private JPanel jPanelWest;
	private JPanel jPanelEast;
	private JPanel jPanelNorth;
}
